
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026dc  080026dc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080026dc  080026dc  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026dc  080026dc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080026e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000001c  08002700  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002700  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094d9  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b74  00000000  00000000  0002951e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002b098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bd6  00000000  00000000  0002c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b899  00000000  00000000  0004300e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082108  00000000  00000000  0004e8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d09af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  000d0a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002694 	.word	0x08002694

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002694 	.word	0x08002694

0800014c <display7SEG_NB>:
 */
#include "7seg_display.h"
int led_NB;
int led_DT;
int led_Tg;
void display7SEG_NB(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint8_t segmentPattern[] = {
 8000154:	4a39      	ldr	r2, [pc, #228]	; (800023c <display7SEG_NB+0xf0>)
 8000156:	f107 030c 	add.w	r3, r7, #12
 800015a:	ca07      	ldmia	r2, {r0, r1, r2}
 800015c:	c303      	stmia	r3!, {r0, r1}
 800015e:	801a      	strh	r2, [r3, #0]
    0b01101101,
    0b01111101,
    0b00000111,
    0b01111111,
    0b01101111 };
  if (num < 0 || num > 9) {
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b00      	cmp	r3, #0
 8000164:	db02      	blt.n	800016c <display7SEG_NB+0x20>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b09      	cmp	r3, #9
 800016a:	dd01      	ble.n	8000170 <display7SEG_NB+0x24>
    num = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	607b      	str	r3, [r7, #4]
  }
  uint8_t pattern = segmentPattern[num];
 8000170:	f107 020c 	add.w	r2, r7, #12
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	75fb      	strb	r3, [r7, #23]
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); //A
 800017c:	7dfb      	ldrb	r3, [r7, #23]
 800017e:	f003 0301 	and.w	r3, r3, #1
 8000182:	2b00      	cmp	r3, #0
 8000184:	bf0c      	ite	eq
 8000186:	2301      	moveq	r3, #1
 8000188:	2300      	movne	r3, #0
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	2101      	movs	r1, #1
 8000190:	482b      	ldr	r0, [pc, #172]	; (8000240 <display7SEG_NB+0xf4>)
 8000192:	f001 fa6a 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); //B
 8000196:	7dfb      	ldrb	r3, [r7, #23]
 8000198:	f003 0302 	and.w	r3, r3, #2
 800019c:	2b00      	cmp	r3, #0
 800019e:	bf0c      	ite	eq
 80001a0:	2301      	moveq	r3, #1
 80001a2:	2300      	movne	r3, #0
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	461a      	mov	r2, r3
 80001a8:	2102      	movs	r1, #2
 80001aa:	4825      	ldr	r0, [pc, #148]	; (8000240 <display7SEG_NB+0xf4>)
 80001ac:	f001 fa5d 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); //C
 80001b0:	7dfb      	ldrb	r3, [r7, #23]
 80001b2:	f003 0304 	and.w	r3, r3, #4
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	bf0c      	ite	eq
 80001ba:	2301      	moveq	r3, #1
 80001bc:	2300      	movne	r3, #0
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	461a      	mov	r2, r3
 80001c2:	2104      	movs	r1, #4
 80001c4:	481e      	ldr	r0, [pc, #120]	; (8000240 <display7SEG_NB+0xf4>)
 80001c6:	f001 fa50 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 80001ca:	7dfb      	ldrb	r3, [r7, #23]
 80001cc:	f003 0308 	and.w	r3, r3, #8
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	bf0c      	ite	eq
 80001d4:	2301      	moveq	r3, #1
 80001d6:	2300      	movne	r3, #0
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	461a      	mov	r2, r3
 80001dc:	2108      	movs	r1, #8
 80001de:	4818      	ldr	r0, [pc, #96]	; (8000240 <display7SEG_NB+0xf4>)
 80001e0:	f001 fa43 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 80001e4:	7dfb      	ldrb	r3, [r7, #23]
 80001e6:	f003 0310 	and.w	r3, r3, #16
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	bf0c      	ite	eq
 80001ee:	2301      	moveq	r3, #1
 80001f0:	2300      	movne	r3, #0
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	2110      	movs	r1, #16
 80001f8:	4811      	ldr	r0, [pc, #68]	; (8000240 <display7SEG_NB+0xf4>)
 80001fa:	f001 fa36 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 80001fe:	7dfb      	ldrb	r3, [r7, #23]
 8000200:	f003 0320 	and.w	r3, r3, #32
 8000204:	2b00      	cmp	r3, #0
 8000206:	bf0c      	ite	eq
 8000208:	2301      	moveq	r3, #1
 800020a:	2300      	movne	r3, #0
 800020c:	b2db      	uxtb	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	2120      	movs	r1, #32
 8000212:	480b      	ldr	r0, [pc, #44]	; (8000240 <display7SEG_NB+0xf4>)
 8000214:	f001 fa29 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); //G
 8000218:	7dfb      	ldrb	r3, [r7, #23]
 800021a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800021e:	2b00      	cmp	r3, #0
 8000220:	bf0c      	ite	eq
 8000222:	2301      	moveq	r3, #1
 8000224:	2300      	movne	r3, #0
 8000226:	b2db      	uxtb	r3, r3
 8000228:	461a      	mov	r2, r3
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <display7SEG_NB+0xf4>)
 800022e:	f001 fa1c 	bl	800166a <HAL_GPIO_WritePin>
  }
 8000232:	bf00      	nop
 8000234:	3718      	adds	r7, #24
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	080026ac 	.word	0x080026ac
 8000240:	40010c00 	.word	0x40010c00

08000244 <display7SEG_DT>:
void display7SEG_DT(int num) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  uint8_t segmentPattern[] = {
 800024c:	4a3c      	ldr	r2, [pc, #240]	; (8000340 <display7SEG_DT+0xfc>)
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	ca07      	ldmia	r2, {r0, r1, r2}
 8000254:	c303      	stmia	r3!, {r0, r1}
 8000256:	801a      	strh	r2, [r3, #0]
    0b01101101,
    0b01111101,
    0b00000111,
    0b01111111,
    0b01101111 };
  if (num < 0 || num > 9) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b00      	cmp	r3, #0
 800025c:	db02      	blt.n	8000264 <display7SEG_DT+0x20>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2b09      	cmp	r3, #9
 8000262:	dd01      	ble.n	8000268 <display7SEG_DT+0x24>
    num = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
  }
  uint8_t pattern = segmentPattern[num];
 8000268:	f107 020c 	add.w	r2, r7, #12
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4413      	add	r3, r2
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	75fb      	strb	r3, [r7, #23]
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); //A
 8000274:	7dfb      	ldrb	r3, [r7, #23]
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	2b00      	cmp	r3, #0
 800027c:	bf0c      	ite	eq
 800027e:	2301      	moveq	r3, #1
 8000280:	2300      	movne	r3, #0
 8000282:	b2db      	uxtb	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	482e      	ldr	r0, [pc, #184]	; (8000344 <display7SEG_DT+0x100>)
 800028a:	f001 f9ee 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); //B
 800028e:	7dfb      	ldrb	r3, [r7, #23]
 8000290:	f003 0302 	and.w	r3, r3, #2
 8000294:	2b00      	cmp	r3, #0
 8000296:	bf0c      	ite	eq
 8000298:	2301      	moveq	r3, #1
 800029a:	2300      	movne	r3, #0
 800029c:	b2db      	uxtb	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4827      	ldr	r0, [pc, #156]	; (8000344 <display7SEG_DT+0x100>)
 80002a6:	f001 f9e0 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); //C
 80002aa:	7dfb      	ldrb	r3, [r7, #23]
 80002ac:	f003 0304 	and.w	r3, r3, #4
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	bf0c      	ite	eq
 80002b4:	2301      	moveq	r3, #1
 80002b6:	2300      	movne	r3, #0
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c0:	4820      	ldr	r0, [pc, #128]	; (8000344 <display7SEG_DT+0x100>)
 80002c2:	f001 f9d2 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 80002c6:	7dfb      	ldrb	r3, [r7, #23]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002dc:	4819      	ldr	r0, [pc, #100]	; (8000344 <display7SEG_DT+0x100>)
 80002de:	f001 f9c4 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 80002e2:	7dfb      	ldrb	r3, [r7, #23]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f8:	4812      	ldr	r0, [pc, #72]	; (8000344 <display7SEG_DT+0x100>)
 80002fa:	f001 f9b6 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 80002fe:	7dfb      	ldrb	r3, [r7, #23]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	2b00      	cmp	r3, #0
 8000306:	bf0c      	ite	eq
 8000308:	2301      	moveq	r3, #1
 800030a:	2300      	movne	r3, #0
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000314:	480b      	ldr	r0, [pc, #44]	; (8000344 <display7SEG_DT+0x100>)
 8000316:	f001 f9a8 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); //G
 800031a:	7dfb      	ldrb	r3, [r7, #23]
 800031c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000320:	2b00      	cmp	r3, #0
 8000322:	bf0c      	ite	eq
 8000324:	2301      	moveq	r3, #1
 8000326:	2300      	movne	r3, #0
 8000328:	b2db      	uxtb	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <display7SEG_DT+0x100>)
 8000332:	f001 f99a 	bl	800166a <HAL_GPIO_WritePin>
  }
 8000336:	bf00      	nop
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	080026ac 	.word	0x080026ac
 8000344:	40010c00 	.word	0x40010c00

08000348 <display7SEG_Tg>:
void display7SEG_Tg(int num) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  uint8_t segmentPattern[] = {
 8000350:	4a3c      	ldr	r2, [pc, #240]	; (8000444 <display7SEG_Tg+0xfc>)
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	ca07      	ldmia	r2, {r0, r1, r2}
 8000358:	c303      	stmia	r3!, {r0, r1}
 800035a:	801a      	strh	r2, [r3, #0]
    0b01101101,
    0b01111101,
    0b00000111,
    0b01111111,
    0b01101111 };
  if (num < 0 || num > 9) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	db02      	blt.n	8000368 <display7SEG_Tg+0x20>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b09      	cmp	r3, #9
 8000366:	dd01      	ble.n	800036c <display7SEG_Tg+0x24>
    num = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
  }
  uint8_t pattern = segmentPattern[num];
 800036c:	f107 020c 	add.w	r2, r7, #12
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	75fb      	strb	r3, [r7, #23]
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); //A
 8000378:	7dfb      	ldrb	r3, [r7, #23]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	bf0c      	ite	eq
 8000382:	2301      	moveq	r3, #1
 8000384:	2300      	movne	r3, #0
 8000386:	b2db      	uxtb	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038e:	482e      	ldr	r0, [pc, #184]	; (8000448 <display7SEG_Tg+0x100>)
 8000390:	f001 f96b 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); //B
 8000394:	7dfb      	ldrb	r3, [r7, #23]
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	2b00      	cmp	r3, #0
 800039c:	bf0c      	ite	eq
 800039e:	2301      	moveq	r3, #1
 80003a0:	2300      	movne	r3, #0
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	4827      	ldr	r0, [pc, #156]	; (8000448 <display7SEG_Tg+0x100>)
 80003ac:	f001 f95d 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); //C
 80003b0:	7dfb      	ldrb	r3, [r7, #23]
 80003b2:	f003 0304 	and.w	r3, r3, #4
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	bf0c      	ite	eq
 80003ba:	2301      	moveq	r3, #1
 80003bc:	2300      	movne	r3, #0
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c6:	4820      	ldr	r0, [pc, #128]	; (8000448 <display7SEG_Tg+0x100>)
 80003c8:	f001 f94f 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 80003cc:	7dfb      	ldrb	r3, [r7, #23]
 80003ce:	f003 0308 	and.w	r3, r3, #8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	bf0c      	ite	eq
 80003d6:	2301      	moveq	r3, #1
 80003d8:	2300      	movne	r3, #0
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e2:	4819      	ldr	r0, [pc, #100]	; (8000448 <display7SEG_Tg+0x100>)
 80003e4:	f001 f941 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 80003e8:	7dfb      	ldrb	r3, [r7, #23]
 80003ea:	f003 0310 	and.w	r3, r3, #16
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	bf0c      	ite	eq
 80003f2:	2301      	moveq	r3, #1
 80003f4:	2300      	movne	r3, #0
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	4812      	ldr	r0, [pc, #72]	; (8000448 <display7SEG_Tg+0x100>)
 8000400:	f001 f933 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 8000404:	7dfb      	ldrb	r3, [r7, #23]
 8000406:	f003 0320 	and.w	r3, r3, #32
 800040a:	2b00      	cmp	r3, #0
 800040c:	bf0c      	ite	eq
 800040e:	2301      	moveq	r3, #1
 8000410:	2300      	movne	r3, #0
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800041a:	480b      	ldr	r0, [pc, #44]	; (8000448 <display7SEG_Tg+0x100>)
 800041c:	f001 f925 	bl	800166a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); //G
 8000420:	7dfb      	ldrb	r3, [r7, #23]
 8000422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000426:	2b00      	cmp	r3, #0
 8000428:	bf0c      	ite	eq
 800042a:	2301      	moveq	r3, #1
 800042c:	2300      	movne	r3, #0
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000436:	4804      	ldr	r0, [pc, #16]	; (8000448 <display7SEG_Tg+0x100>)
 8000438:	f001 f917 	bl	800166a <HAL_GPIO_WritePin>
  }
 800043c:	bf00      	nop
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	080026ac 	.word	0x080026ac
 8000448:	40010800 	.word	0x40010800

0800044c <displayNB_showTime>:
void displayNB_showTime(int time) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
    display7SEG_Tg(time/10);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <displayNB_showTime+0x44>)
 8000458:	fb82 1203 	smull	r1, r2, r2, r3
 800045c:	1092      	asrs	r2, r2, #2
 800045e:	17db      	asrs	r3, r3, #31
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff70 	bl	8000348 <display7SEG_Tg>
    display7SEG_NB(time%10);
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <displayNB_showTime+0x44>)
 800046c:	fb83 1302 	smull	r1, r3, r3, r2
 8000470:	1099      	asrs	r1, r3, #2
 8000472:	17d3      	asrs	r3, r2, #31
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	460b      	mov	r3, r1
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	440b      	add	r3, r1
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	1ad1      	subs	r1, r2, r3
 8000480:	4608      	mov	r0, r1
 8000482:	f7ff fe63 	bl	800014c <display7SEG_NB>
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	66666667 	.word	0x66666667

08000494 <displayDT_showTime>:
void displayDT_showTime(int time) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    display7SEG_Tg(time/10);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <displayDT_showTime+0x44>)
 80004a0:	fb82 1203 	smull	r1, r2, r2, r3
 80004a4:	1092      	asrs	r2, r2, #2
 80004a6:	17db      	asrs	r3, r3, #31
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff4c 	bl	8000348 <display7SEG_Tg>
    display7SEG_DT(time%10);
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <displayDT_showTime+0x44>)
 80004b4:	fb83 1302 	smull	r1, r3, r3, r2
 80004b8:	1099      	asrs	r1, r3, #2
 80004ba:	17d3      	asrs	r3, r2, #31
 80004bc:	1ac9      	subs	r1, r1, r3
 80004be:	460b      	mov	r3, r1
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	440b      	add	r3, r1
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	1ad1      	subs	r1, r2, r3
 80004c8:	4608      	mov	r0, r1
 80004ca:	f7ff febb 	bl	8000244 <display7SEG_DT>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	66666667 	.word	0x66666667

080004dc <display_showMode>:
void display_showMode(int mode) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    display7SEG_Tg(mode/100);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <display_showMode+0x44>)
 80004e8:	fb82 1203 	smull	r1, r2, r2, r3
 80004ec:	1152      	asrs	r2, r2, #5
 80004ee:	17db      	asrs	r3, r3, #31
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff28 	bl	8000348 <display7SEG_Tg>
    display7SEG_DT(mode%10);
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <display_showMode+0x48>)
 80004fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000500:	1099      	asrs	r1, r3, #2
 8000502:	17d3      	asrs	r3, r2, #31
 8000504:	1ac9      	subs	r1, r1, r3
 8000506:	460b      	mov	r3, r1
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	440b      	add	r3, r1
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	1ad1      	subs	r1, r2, r3
 8000510:	4608      	mov	r0, r1
 8000512:	f7ff fe97 	bl	8000244 <display7SEG_DT>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	51eb851f 	.word	0x51eb851f
 8000524:	66666667 	.word	0x66666667

08000528 <isButton1Pressed>:

int TimeOutForKeyPress[NUM_BUTTONS]=  {500,500,500};
int button1_pressed[NUM_BUTTONS] = {0,0,0};
int button1_long_pressed[NUM_BUTTONS] = {0,0,0};

int isButton1Pressed(int index){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if(button1_pressed[index] == 1){
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <isButton1Pressed+0x30>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <isButton1Pressed+0x22>
		button1_pressed[index] = 0;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <isButton1Pressed+0x30>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2100      	movs	r1, #0
 8000542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <isButton1Pressed+0x24>
	}
	return 0;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000038 	.word	0x20000038

0800055c <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index){
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	//TODO
	button1_pressed[index] = 1;
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <subKeyProcess+0x1c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2101      	movs	r1, #1
 800056a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000038 	.word	0x20000038

0800057c <getKeyInput>:

void getKeyInput(){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
for(int i=0; i<NUM_BUTTONS;i++){
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	e08c      	b.n	80006a2 <getKeyInput+0x126>
  KeyReg0[i] = KeyReg1[i];
 8000588:	4a4a      	ldr	r2, [pc, #296]	; (80006b4 <getKeyInput+0x138>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000590:	4949      	ldr	r1, [pc, #292]	; (80006b8 <getKeyInput+0x13c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg2[i];
 8000598:	4a48      	ldr	r2, [pc, #288]	; (80006bc <getKeyInput+0x140>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a0:	4944      	ldr	r1, [pc, #272]	; (80006b4 <getKeyInput+0x138>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  // Add your key
  if(i==0)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d109      	bne.n	80005c2 <getKeyInput+0x46>
  {
	  KeyReg2[0] = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80005ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b2:	4843      	ldr	r0, [pc, #268]	; (80006c0 <getKeyInput+0x144>)
 80005b4:	f001 f842 	bl	800163c <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b3f      	ldr	r3, [pc, #252]	; (80006bc <getKeyInput+0x140>)
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e018      	b.n	80005f4 <getKeyInput+0x78>
  }
  else if(i==1){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d109      	bne.n	80005dc <getKeyInput+0x60>
	  KeyReg2[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80005c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005cc:	483c      	ldr	r0, [pc, #240]	; (80006c0 <getKeyInput+0x144>)
 80005ce:	f001 f835 	bl	800163c <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b39      	ldr	r3, [pc, #228]	; (80006bc <getKeyInput+0x140>)
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	e00b      	b.n	80005f4 <getKeyInput+0x78>
  }
  else if(i==2){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d108      	bne.n	80005f4 <getKeyInput+0x78>
	  KeyReg2[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80005e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e6:	4836      	ldr	r0, [pc, #216]	; (80006c0 <getKeyInput+0x144>)
 80005e8:	f001 f828 	bl	800163c <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <getKeyInput+0x140>)
 80005f2:	609a      	str	r2, [r3, #8]
  }

  if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80005f4:	4a30      	ldr	r2, [pc, #192]	; (80006b8 <getKeyInput+0x13c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fc:	492d      	ldr	r1, [pc, #180]	; (80006b4 <getKeyInput+0x138>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000604:	429a      	cmp	r2, r3
 8000606:	d149      	bne.n	800069c <getKeyInput+0x120>
 8000608:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <getKeyInput+0x138>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000610:	492a      	ldr	r1, [pc, #168]	; (80006bc <getKeyInput+0x140>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000618:	429a      	cmp	r2, r3
 800061a:	d13f      	bne.n	800069c <getKeyInput+0x120>
              if (KeyReg3[i] != KeyReg2[i]) {
 800061c:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <getKeyInput+0x148>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000624:	4925      	ldr	r1, [pc, #148]	; (80006bc <getKeyInput+0x140>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800062c:	429a      	cmp	r2, r3
 800062e:	d017      	beq.n	8000660 <getKeyInput+0xe4>
                  KeyReg3[i] = KeyReg2[i];
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <getKeyInput+0x140>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000638:	4922      	ldr	r1, [pc, #136]	; (80006c4 <getKeyInput+0x148>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  if (KeyReg2[i] == PRESSED_STATE) {
 8000640:	4a1e      	ldr	r2, [pc, #120]	; (80006bc <getKeyInput+0x140>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d127      	bne.n	800069c <getKeyInput+0x120>
                      TimeOutForKeyPress[i] = 500;  // Reset timeout khi nút nhấn
 800064c:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <getKeyInput+0x14c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                      subKeyProcess(i);  // Gọi xử lý khi nhấn nút
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff7f 	bl	800055c <subKeyProcess>
 800065e:	e01d      	b.n	800069c <getKeyInput+0x120>
                  }
              } else {
                  TimeOutForKeyPress[i]--;
 8000660:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <getKeyInput+0x14c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	4917      	ldr	r1, [pc, #92]	; (80006c8 <getKeyInput+0x14c>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  if (TimeOutForKeyPress[i] == 0) {
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <getKeyInput+0x14c>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10e      	bne.n	800069c <getKeyInput+0x120>
                      TimeOutForKeyPress[i] = 500;  // Reset timeout
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <getKeyInput+0x14c>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                      if (KeyReg2[i] == PRESSED_STATE) {
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <getKeyInput+0x140>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <getKeyInput+0x120>
                          subKeyProcess(i);  // Gọi lại khi nút được giữ lâu
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff60 	bl	800055c <subKeyProcess>
for(int i=0; i<NUM_BUTTONS;i++){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	f77f af6f 	ble.w	8000588 <getKeyInput+0xc>
                      }
                  }
              }
          }
      }
  }
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000006c 	.word	0x2000006c
 80006b8:	20000060 	.word	0x20000060
 80006bc:	20000078 	.word	0x20000078
 80006c0:	40011000 	.word	0x40011000
 80006c4:	20000054 	.word	0x20000054
 80006c8:	20000000 	.word	0x20000000

080006cc <setTimer>:
int TIMER_CYCLE = 10;

int Timer_Counter[MAX_TIMER];
int Timer_Flag[MAX_TIMER];

void setTimer(int index, int duration){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	Timer_Counter[index] = duration/TIMER_CYCLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <setTimer+0x30>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	fb92 f2f3 	sdiv	r2, r2, r3
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <setTimer+0x34>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Timer_Flag[index] = 0;
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <setTimer+0x38>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2100      	movs	r1, #0
 80006ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	2000000c 	.word	0x2000000c
 8000700:	20000098 	.word	0x20000098
 8000704:	20000084 	.word	0x20000084

08000708 <runTimer>:

void runTimer(void){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_TIMER;i++){
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	e016      	b.n	8000742 <runTimer+0x3a>
		Timer_Counter[i]--;
 8000714:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <runTimer+0x4c>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <runTimer+0x4c>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(Timer_Counter[i] <=0){
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <runTimer+0x4c>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072e:	2b00      	cmp	r3, #0
 8000730:	dc04      	bgt.n	800073c <runTimer+0x34>
			Timer_Flag[i] = 1;
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <runTimer+0x50>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2101      	movs	r1, #1
 8000738:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_TIMER;i++){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b04      	cmp	r3, #4
 8000746:	dde5      	ble.n	8000714 <runTimer+0xc>
		}
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000098 	.word	0x20000098
 8000758:	20000084 	.word	0x20000084

0800075c <fsm_auto_run>:
#include "fsm_auto.h"
int status;
int t_red;
int t_yellow;
int t_green;
void fsm_auto_run(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	switch(status)
 8000760:	4b9d      	ldr	r3, [pc, #628]	; (80009d8 <fsm_auto_run+0x27c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3b02      	subs	r3, #2
 8000766:	2b06      	cmp	r3, #6
 8000768:	f200 81ad 	bhi.w	8000ac6 <fsm_auto_run+0x36a>
 800076c:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <fsm_auto_run+0x18>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000965 	.word	0x08000965
 8000778:	080009ed 	.word	0x080009ed
 800077c:	08000a5d 	.word	0x08000a5d
 8000780:	08000791 	.word	0x08000791
 8000784:	08000801 	.word	0x08000801
 8000788:	08000877 	.word	0x08000877
 800078c:	080008e7 	.word	0x080008e7
	{
	case cd1:
			redgreen_state();
 8000790:	f000 fbb4 	bl	8000efc <redgreen_state>
			if(Timer_Flag[0])
 8000794:	4b91      	ldr	r3, [pc, #580]	; (80009dc <fsm_auto_run+0x280>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d014      	beq.n	80007c6 <fsm_auto_run+0x6a>
			{
				displayNB_showTime(led_NB--);
 800079c:	4b90      	ldr	r3, [pc, #576]	; (80009e0 <fsm_auto_run+0x284>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	498f      	ldr	r1, [pc, #572]	; (80009e0 <fsm_auto_run+0x284>)
 80007a4:	600a      	str	r2, [r1, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe50 	bl	800044c <displayNB_showTime>
				displayDT_showTime(led_DT--);
 80007ac:	4b8d      	ldr	r3, [pc, #564]	; (80009e4 <fsm_auto_run+0x288>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	498c      	ldr	r1, [pc, #560]	; (80009e4 <fsm_auto_run+0x288>)
 80007b4:	600a      	str	r2, [r1, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fe6c 	bl	8000494 <displayDT_showTime>
				setTimer(0,1000);
 80007bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ff83 	bl	80006cc <setTimer>
			}
			if(Timer_Flag[1]){
 80007c6:	4b85      	ldr	r3, [pc, #532]	; (80009dc <fsm_auto_run+0x280>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <fsm_auto_run+0x88>
				led_DT=2;
 80007ce:	4b85      	ldr	r3, [pc, #532]	; (80009e4 <fsm_auto_run+0x288>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
				setTimer(1,2000);
 80007d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff ff77 	bl	80006cc <setTimer>
				status=cd2;
 80007de:	4b7e      	ldr	r3, [pc, #504]	; (80009d8 <fsm_auto_run+0x27c>)
 80007e0:	2206      	movs	r2, #6
 80007e2:	601a      	str	r2, [r3, #0]
				}
			if(isButton1Pressed(0))
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff fe9f 	bl	8000528 <isButton1Pressed>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	f000 816c 	beq.w	8000aca <fsm_auto_run+0x36e>
			{
				status=MODE_2;
 80007f2:	4b79      	ldr	r3, [pc, #484]	; (80009d8 <fsm_auto_run+0x27c>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
				display_showMode(MODE_2);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff fe6f 	bl	80004dc <display_showMode>
			}
			break;
 80007fe:	e164      	b.n	8000aca <fsm_auto_run+0x36e>
	case cd2:
			redyellow_state();
 8000800:	f000 fba0 	bl	8000f44 <redyellow_state>
			if(Timer_Flag[0])
 8000804:	4b75      	ldr	r3, [pc, #468]	; (80009dc <fsm_auto_run+0x280>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d014      	beq.n	8000836 <fsm_auto_run+0xda>
			{
				displayDT_showTime(led_DT--);
 800080c:	4b75      	ldr	r3, [pc, #468]	; (80009e4 <fsm_auto_run+0x288>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	4974      	ldr	r1, [pc, #464]	; (80009e4 <fsm_auto_run+0x288>)
 8000814:	600a      	str	r2, [r1, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe3c 	bl	8000494 <displayDT_showTime>
				displayNB_showTime(led_NB--);
 800081c:	4b70      	ldr	r3, [pc, #448]	; (80009e0 <fsm_auto_run+0x284>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	496f      	ldr	r1, [pc, #444]	; (80009e0 <fsm_auto_run+0x284>)
 8000824:	600a      	str	r2, [r1, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe10 	bl	800044c <displayNB_showTime>
				setTimer(0,1000);
 800082c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ff4b 	bl	80006cc <setTimer>
			}
			if(Timer_Flag[1]){
 8000836:	4b69      	ldr	r3, [pc, #420]	; (80009dc <fsm_auto_run+0x280>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00d      	beq.n	800085a <fsm_auto_run+0xfe>
				led_NB=3;
 800083e:	4b68      	ldr	r3, [pc, #416]	; (80009e0 <fsm_auto_run+0x284>)
 8000840:	2203      	movs	r2, #3
 8000842:	601a      	str	r2, [r3, #0]
				led_DT=5;
 8000844:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <fsm_auto_run+0x288>)
 8000846:	2205      	movs	r2, #5
 8000848:	601a      	str	r2, [r3, #0]
				setTimer(1,3000);
 800084a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff3c 	bl	80006cc <setTimer>
				status=cd3;
 8000854:	4b60      	ldr	r3, [pc, #384]	; (80009d8 <fsm_auto_run+0x27c>)
 8000856:	2207      	movs	r2, #7
 8000858:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed(0))
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fe64 	bl	8000528 <isButton1Pressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 8133 	beq.w	8000ace <fsm_auto_run+0x372>
			{
				status=MODE_2;
 8000868:	4b5b      	ldr	r3, [pc, #364]	; (80009d8 <fsm_auto_run+0x27c>)
 800086a:	2202      	movs	r2, #2
 800086c:	601a      	str	r2, [r3, #0]
				display_showMode(MODE_2);
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff fe34 	bl	80004dc <display_showMode>
			}
			break;
 8000874:	e12b      	b.n	8000ace <fsm_auto_run+0x372>
	case cd3:
			greenred_state();
 8000876:	f000 fb89 	bl	8000f8c <greenred_state>
			if(Timer_Flag[0])
 800087a:	4b58      	ldr	r3, [pc, #352]	; (80009dc <fsm_auto_run+0x280>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d014      	beq.n	80008ac <fsm_auto_run+0x150>
			{
				displayNB_showTime(led_NB--);
 8000882:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <fsm_auto_run+0x284>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	4955      	ldr	r1, [pc, #340]	; (80009e0 <fsm_auto_run+0x284>)
 800088a:	600a      	str	r2, [r1, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fddd 	bl	800044c <displayNB_showTime>
				displayDT_showTime(led_DT--);
 8000892:	4b54      	ldr	r3, [pc, #336]	; (80009e4 <fsm_auto_run+0x288>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	4952      	ldr	r1, [pc, #328]	; (80009e4 <fsm_auto_run+0x288>)
 800089a:	600a      	str	r2, [r1, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fdf9 	bl	8000494 <displayDT_showTime>
				setTimer(0,1000);
 80008a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ff10 	bl	80006cc <setTimer>
			}
			if(Timer_Flag[1]){
 80008ac:	4b4b      	ldr	r3, [pc, #300]	; (80009dc <fsm_auto_run+0x280>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00a      	beq.n	80008ca <fsm_auto_run+0x16e>
				led_NB=2;
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <fsm_auto_run+0x284>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	601a      	str	r2, [r3, #0]
				setTimer(1,2000);
 80008ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff ff04 	bl	80006cc <setTimer>
				status=cd4;
 80008c4:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <fsm_auto_run+0x27c>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed(0))
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fe2c 	bl	8000528 <isButton1Pressed>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 80fd 	beq.w	8000ad2 <fsm_auto_run+0x376>
			{
				status=MODE_2;
 80008d8:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <fsm_auto_run+0x27c>)
 80008da:	2202      	movs	r2, #2
 80008dc:	601a      	str	r2, [r3, #0]
				display_showMode(MODE_2);
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fdfc 	bl	80004dc <display_showMode>
			}
			break;
 80008e4:	e0f5      	b.n	8000ad2 <fsm_auto_run+0x376>
	case cd4:
			yellowred_state();
 80008e6:	f000 fb75 	bl	8000fd4 <yellowred_state>
			if(Timer_Flag[0])
 80008ea:	4b3c      	ldr	r3, [pc, #240]	; (80009dc <fsm_auto_run+0x280>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d014      	beq.n	800091c <fsm_auto_run+0x1c0>
			{
				displayNB_showTime(led_NB--);
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <fsm_auto_run+0x284>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	4939      	ldr	r1, [pc, #228]	; (80009e0 <fsm_auto_run+0x284>)
 80008fa:	600a      	str	r2, [r1, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fda5 	bl	800044c <displayNB_showTime>
				displayDT_showTime(led_DT--);
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <fsm_auto_run+0x288>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	4936      	ldr	r1, [pc, #216]	; (80009e4 <fsm_auto_run+0x288>)
 800090a:	600a      	str	r2, [r1, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fdc1 	bl	8000494 <displayDT_showTime>
				setTimer(0,1000);
 8000912:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fed8 	bl	80006cc <setTimer>
			}
			if(Timer_Flag[1]){
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <fsm_auto_run+0x280>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d011      	beq.n	8000948 <fsm_auto_run+0x1ec>
				led_NB=5;
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <fsm_auto_run+0x284>)
 8000926:	2205      	movs	r2, #5
 8000928:	601a      	str	r2, [r3, #0]
				led_DT=3;
 800092a:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <fsm_auto_run+0x288>)
 800092c:	2203      	movs	r2, #3
 800092e:	601a      	str	r2, [r3, #0]
				setTimer(0,0);
 8000930:	2100      	movs	r1, #0
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff feca 	bl	80006cc <setTimer>
				setTimer(1,3000);
 8000938:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fec5 	bl	80006cc <setTimer>
				status=cd1;
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <fsm_auto_run+0x27c>)
 8000944:	2205      	movs	r2, #5
 8000946:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed(0))
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fded 	bl	8000528 <isButton1Pressed>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 80c0 	beq.w	8000ad6 <fsm_auto_run+0x37a>
			{
				status=MODE_2;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <fsm_auto_run+0x27c>)
 8000958:	2202      	movs	r2, #2
 800095a:	601a      	str	r2, [r3, #0]
				display_showMode(MODE_2);
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fdbd 	bl	80004dc <display_showMode>
			}
			break;
 8000962:	e0b8      	b.n	8000ad6 <fsm_auto_run+0x37a>
	case MODE_2:
		run_ledblink();
 8000964:	f000 f8c8 	bl	8000af8 <run_ledblink>
		if(isButton1Pressed(1))
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fddd 	bl	8000528 <isButton1Pressed>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d010      	beq.n	8000996 <fsm_auto_run+0x23a>
		{

			t_red++;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <fsm_auto_run+0x28c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <fsm_auto_run+0x28c>)
 800097c:	6013      	str	r3, [r2, #0]
			if(t_red>99)
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <fsm_auto_run+0x28c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b63      	cmp	r3, #99	; 0x63
 8000984:	dd02      	ble.n	800098c <fsm_auto_run+0x230>
			{
				t_red=0;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <fsm_auto_run+0x28c>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
			}
			displayNB_showTime(t_red);
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <fsm_auto_run+0x28c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fd5b 	bl	800044c <displayNB_showTime>
		}
		if(isButton1Pressed(0))
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdc6 	bl	8000528 <isButton1Pressed>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <fsm_auto_run+0x252>
		{
			status=MODE_3;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <fsm_auto_run+0x27c>)
 80009a4:	2203      	movs	r2, #3
 80009a6:	601a      	str	r2, [r3, #0]
			display_showMode(MODE_3);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff fd97 	bl	80004dc <display_showMode>
		}
		if(isButton1Pressed(2))
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff fdba 	bl	8000528 <isButton1Pressed>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 808f 	beq.w	8000ada <fsm_auto_run+0x37e>
		{
			led_NB=t_red;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <fsm_auto_run+0x28c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <fsm_auto_run+0x284>)
 80009c2:	6013      	str	r3, [r2, #0]
			t_red=0;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <fsm_auto_run+0x28c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
			displayNB_showTime(t_red);
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <fsm_auto_run+0x28c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fd3c 	bl	800044c <displayNB_showTime>
		}
		break;
 80009d4:	e081      	b.n	8000ada <fsm_auto_run+0x37e>
 80009d6:	bf00      	nop
 80009d8:	20000044 	.word	0x20000044
 80009dc:	20000084 	.word	0x20000084
 80009e0:	20000050 	.word	0x20000050
 80009e4:	2000004c 	.word	0x2000004c
 80009e8:	200000b0 	.word	0x200000b0

	case MODE_3:
		run_ledblink();
 80009ec:	f000 f884 	bl	8000af8 <run_ledblink>
		if(isButton1Pressed(1))
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fd99 	bl	8000528 <isButton1Pressed>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d010      	beq.n	8000a1e <fsm_auto_run+0x2c2>

		{
			t_yellow++;
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <fsm_auto_run+0x38c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000a04:	6013      	str	r3, [r2, #0]
			if(t_yellow>99)
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b63      	cmp	r3, #99	; 0x63
 8000a0c:	dd02      	ble.n	8000a14 <fsm_auto_run+0x2b8>
			{
				t_yellow=0;
 8000a0e:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
			}
			displayNB_showTime(t_yellow);
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fd17 	bl	800044c <displayNB_showTime>
		}
		if(isButton1Pressed(0))
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fd82 	bl	8000528 <isButton1Pressed>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <fsm_auto_run+0x2da>
		{
			status=MODE_4;
 8000a2a:	4b30      	ldr	r3, [pc, #192]	; (8000aec <fsm_auto_run+0x390>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	601a      	str	r2, [r3, #0]
			display_showMode(MODE_4);
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff fd53 	bl	80004dc <display_showMode>
		}
		if(isButton1Pressed(2))
 8000a36:	2002      	movs	r0, #2
 8000a38:	f7ff fd76 	bl	8000528 <isButton1Pressed>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d04d      	beq.n	8000ade <fsm_auto_run+0x382>
		{
			led_DT=t_yellow;
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a2a      	ldr	r2, [pc, #168]	; (8000af0 <fsm_auto_run+0x394>)
 8000a48:	6013      	str	r3, [r2, #0]
			t_yellow=0;
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
			displayNB_showTime(t_yellow);
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fcf9 	bl	800044c <displayNB_showTime>
		}
		break;
 8000a5a:	e040      	b.n	8000ade <fsm_auto_run+0x382>
	case MODE_4:
		run_ledblink();
 8000a5c:	f000 f84c 	bl	8000af8 <run_ledblink>
		if(isButton1Pressed(1))
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff fd61 	bl	8000528 <isButton1Pressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d010      	beq.n	8000a8e <fsm_auto_run+0x332>
		{
			t_green++;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <fsm_auto_run+0x398>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <fsm_auto_run+0x398>)
 8000a74:	6013      	str	r3, [r2, #0]
			if(t_green>99)
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <fsm_auto_run+0x398>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b63      	cmp	r3, #99	; 0x63
 8000a7c:	dd02      	ble.n	8000a84 <fsm_auto_run+0x328>
			{
				t_green=0;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <fsm_auto_run+0x398>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
			}
			displayNB_showTime(t_green);
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <fsm_auto_run+0x398>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fcdf 	bl	800044c <displayNB_showTime>
		}
		if(isButton1Pressed(0))
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fd4a 	bl	8000528 <isButton1Pressed>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <fsm_auto_run+0x344>
		{
			status=cd1;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <fsm_auto_run+0x390>)
 8000a9c:	2205      	movs	r2, #5
 8000a9e:	601a      	str	r2, [r3, #0]
		}
		if(isButton1Pressed(2))
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f7ff fd41 	bl	8000528 <isButton1Pressed>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d01a      	beq.n	8000ae2 <fsm_auto_run+0x386>
		{
			led_DT=t_green;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <fsm_auto_run+0x398>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <fsm_auto_run+0x394>)
 8000ab2:	6013      	str	r3, [r2, #0]
			t_green=0;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <fsm_auto_run+0x398>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
			displayNB_showTime(t_green);
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <fsm_auto_run+0x398>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fcc4 	bl	800044c <displayNB_showTime>
		}
		break;
 8000ac4:	e00d      	b.n	8000ae2 <fsm_auto_run+0x386>
	default:
		break;
 8000ac6:	bf00      	nop
 8000ac8:	e00c      	b.n	8000ae4 <fsm_auto_run+0x388>
			break;
 8000aca:	bf00      	nop
 8000acc:	e00a      	b.n	8000ae4 <fsm_auto_run+0x388>
			break;
 8000ace:	bf00      	nop
 8000ad0:	e008      	b.n	8000ae4 <fsm_auto_run+0x388>
			break;
 8000ad2:	bf00      	nop
 8000ad4:	e006      	b.n	8000ae4 <fsm_auto_run+0x388>
			break;
 8000ad6:	bf00      	nop
 8000ad8:	e004      	b.n	8000ae4 <fsm_auto_run+0x388>
		break;
 8000ada:	bf00      	nop
 8000adc:	e002      	b.n	8000ae4 <fsm_auto_run+0x388>
		break;
 8000ade:	bf00      	nop
 8000ae0:	e000      	b.n	8000ae4 <fsm_auto_run+0x388>
		break;
 8000ae2:	bf00      	nop
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000ac 	.word	0x200000ac
 8000aec:	20000044 	.word	0x20000044
 8000af0:	2000004c 	.word	0x2000004c
 8000af4:	200000b4 	.word	0x200000b4

08000af8 <run_ledblink>:
void run_ledblink(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
if(Timer_Flag[2])
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <run_ledblink+0x4c>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d01c      	beq.n	8000b3e <run_ledblink+0x46>
	{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000b04:	2101      	movs	r1, #1
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <run_ledblink+0x50>)
 8000b08:	f000 fdc7 	bl	800169a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <run_ledblink+0x50>)
 8000b10:	f000 fdc3 	bl	800169a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000b14:	2102      	movs	r1, #2
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <run_ledblink+0x50>)
 8000b18:	f000 fdbf 	bl	800169a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <run_ledblink+0x50>)
 8000b20:	f000 fdbb 	bl	800169a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000b24:	2104      	movs	r1, #4
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <run_ledblink+0x50>)
 8000b28:	f000 fdb7 	bl	800169a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <run_ledblink+0x50>)
 8000b30:	f000 fdb3 	bl	800169a <HAL_GPIO_TogglePin>
			setTimer(2,500);
 8000b34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fdc7 	bl	80006cc <setTimer>
	}
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000084 	.word	0x20000084
 8000b48:	40010800 	.word	0x40010800

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 fa8a 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f838 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 f8be 	bl	8000cd8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b5c:	f000 f870 	bl	8000c40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <main+0x64>)
 8000b62:	f001 f9df 	bl	8001f24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  led_NB=5;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <main+0x68>)
 8000b68:	2205      	movs	r2, #5
 8000b6a:	601a      	str	r2, [r3, #0]
  led_DT=3;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <main+0x6c>)
 8000b6e:	2203      	movs	r2, #3
 8000b70:	601a      	str	r2, [r3, #0]
  setTimer(0,0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fda9 	bl	80006cc <setTimer>
  setTimer(1,3000);
 8000b7a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fda4 	bl	80006cc <setTimer>
  status=cd1;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <main+0x70>)
 8000b86:	2205      	movs	r2, #5
 8000b88:	601a      	str	r2, [r3, #0]
  setTimer(3,100);
 8000b8a:	2164      	movs	r1, #100	; 0x64
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f7ff fd9d 	bl	80006cc <setTimer>

  while (1)
  {
    /* USER CODE END WHILE */
	  if(Timer_Flag[3])
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <main+0x74>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <main+0x5e>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <main+0x78>)
 8000b9e:	f000 fd7c 	bl	800169a <HAL_GPIO_TogglePin>
		  setTimer(3,100);
 8000ba2:	2164      	movs	r1, #100	; 0x64
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f7ff fd91 	bl	80006cc <setTimer>
	  }
	  fsm_auto_run();
 8000baa:	f7ff fdd7 	bl	800075c <fsm_auto_run>
  {
 8000bae:	e7f0      	b.n	8000b92 <main+0x46>
 8000bb0:	200000b8 	.word	0x200000b8
 8000bb4:	20000050 	.word	0x20000050
 8000bb8:	2000004c 	.word	0x2000004c
 8000bbc:	20000044 	.word	0x20000044
 8000bc0:	20000084 	.word	0x20000084
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b090      	sub	sp, #64	; 0x40
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	2228      	movs	r2, #40	; 0x28
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fd54 	bl	8002684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fd64 	bl	80016cc <HAL_RCC_OscConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f8e3 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	230f      	movs	r3, #15
 8000c10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 ffd0 	bl	8001bcc <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f8cf 	bl	8000dd4 <Error_Handler>
  }
}
 8000c36:	bf00      	nop
 8000c38:	3740      	adds	r7, #64	; 0x40
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c74:	2209      	movs	r2, #9
 8000c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c86:	f001 f8fd 	bl	8001e84 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c90:	f000 f8a0 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000ca2:	f001 fa7b 	bl	800219c <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f892 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000cbe:	f001 fc53 	bl	8002568 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 f884 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000b8 	.word	0x200000b8

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a2e      	ldr	r2, [pc, #184]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a28      	ldr	r2, [pc, #160]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a22      	ldr	r2, [pc, #136]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d34:	2200      	movs	r2, #0
 8000d36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d3a:	481d      	ldr	r0, [pc, #116]	; (8000db0 <MX_GPIO_Init+0xd8>)
 8000d3c:	f000 fc95 	bl	800166a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d40:	2200      	movs	r2, #0
 8000d42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d46:	481b      	ldr	r0, [pc, #108]	; (8000db4 <MX_GPIO_Init+0xdc>)
 8000d48:	f000 fc8f 	bl	800166a <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000d4c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4815      	ldr	r0, [pc, #84]	; (8000db8 <MX_GPIO_Init+0xe0>)
 8000d62:	f000 faf1 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_GPIO_Init+0xd8>)
 8000d80:	f000 fae2 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d88:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_GPIO_Init+0xdc>)
 8000d9e:	f000 fad3 	bl	8001348 <HAL_GPIO_Init>

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40011000 	.word	0x40011000

08000dbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	runTimer();
 8000dc4:	f7ff fca0 	bl	8000708 <runTimer>
	getKeyInput();
 8000dc8:	f7ff fbd8 	bl	800057c <getKeyInput>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_MspInit+0x5c>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <HAL_MspInit+0x5c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6193      	str	r3, [r2, #24]
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_MspInit+0x5c>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x5c>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_MspInit+0x5c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x5c>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_MspInit+0x60>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_MspInit+0x60>)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e54:	d113      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_TIM_Base_MspInit+0x44>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_TIM_Base_MspInit+0x44>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_TIM_Base_MspInit+0x44>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	201c      	movs	r0, #28
 8000e74:	f000 fa31 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e78:	201c      	movs	r0, #28
 8000e7a:	f000 fa4a 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f90f 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <TIM2_IRQHandler+0x10>)
 8000ee2:	f001 f86b 	bl	8001fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000b8 	.word	0x200000b8

08000ef0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <redgreen_state>:
 */
#include "trafficlight.h"
// 0(Đ)-1(V)-2(X) NB
// 3(Đ)-4(V)-6(X) ĐT

void redgreen_state(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2101      	movs	r1, #1
 8000f04:	480e      	ldr	r0, [pc, #56]	; (8000f40 <redgreen_state+0x44>)
 8000f06:	f000 fbb0 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	480c      	ldr	r0, [pc, #48]	; (8000f40 <redgreen_state+0x44>)
 8000f10:	f000 fbab 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2104      	movs	r1, #4
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <redgreen_state+0x44>)
 8000f1a:	f000 fba6 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2108      	movs	r1, #8
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <redgreen_state+0x44>)
 8000f24:	f000 fba1 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <redgreen_state+0x44>)
 8000f2e:	f000 fb9c 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	4802      	ldr	r0, [pc, #8]	; (8000f40 <redgreen_state+0x44>)
 8000f38:	f000 fb97 	bl	800166a <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010800 	.word	0x40010800

08000f44 <redyellow_state>:
void redyellow_state(void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	480e      	ldr	r0, [pc, #56]	; (8000f88 <redyellow_state+0x44>)
 8000f4e:	f000 fb8c 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <redyellow_state+0x44>)
 8000f58:	f000 fb87 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <redyellow_state+0x44>)
 8000f62:	f000 fb82 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <redyellow_state+0x44>)
 8000f6c:	f000 fb7d 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <redyellow_state+0x44>)
 8000f76:	f000 fb78 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	4802      	ldr	r0, [pc, #8]	; (8000f88 <redyellow_state+0x44>)
 8000f80:	f000 fb73 	bl	800166a <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40010800 	.word	0x40010800

08000f8c <greenred_state>:
void greenred_state(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2101      	movs	r1, #1
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <greenred_state+0x44>)
 8000f96:	f000 fb68 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <greenred_state+0x44>)
 8000fa0:	f000 fb63 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <greenred_state+0x44>)
 8000faa:	f000 fb5e 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <greenred_state+0x44>)
 8000fb4:	f000 fb59 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <greenred_state+0x44>)
 8000fbe:	f000 fb54 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <greenred_state+0x44>)
 8000fc8:	f000 fb4f 	bl	800166a <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <yellowred_state>:
void yellowred_state(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <yellowred_state+0x44>)
 8000fde:	f000 fb44 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	480c      	ldr	r0, [pc, #48]	; (8001018 <yellowred_state+0x44>)
 8000fe8:	f000 fb3f 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <yellowred_state+0x44>)
 8000ff2:	f000 fb3a 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <yellowred_state+0x44>)
 8000ffc:	f000 fb35 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2110      	movs	r1, #16
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <yellowred_state+0x44>)
 8001006:	f000 fb30 	bl	800166a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2140      	movs	r1, #64	; 0x40
 800100e:	4802      	ldr	r0, [pc, #8]	; (8001018 <yellowred_state+0x44>)
 8001010:	f000 fb2b 	bl	800166a <HAL_GPIO_WritePin>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40010800 	.word	0x40010800

0800101c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800101c:	f7ff ff68 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001022:	490c      	ldr	r1, [pc, #48]	; (8001054 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001038:	4c09      	ldr	r4, [pc, #36]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f001 faf9 	bl	800263c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800104a:	f7ff fd7f 	bl	8000b4c <main>
  bx lr
 800104e:	4770      	bx	lr
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001058:	080026e4 	.word	0x080026e4
  ldr r2, =_sbss
 800105c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001060:	20000104 	.word	0x20000104

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x28>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x28>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f923 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff feac 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f93b 	bl	800132e <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f903 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000010 	.word	0x20000010
 80010ec:	20000018 	.word	0x20000018
 80010f0:	20000014 	.word	0x20000014

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x20>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a03      	ldr	r2, [pc, #12]	; (8001114 <HAL_IncTick+0x20>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	20000018 	.word	0x20000018
 8001114:	20000100 	.word	0x20000100

08001118 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b02      	ldr	r3, [pc, #8]	; (8001128 <HAL_GetTick+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000100 	.word	0x20000100

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4906      	ldr	r1, [pc, #24]	; (80011c4 <__NVIC_EnableIRQ+0x34>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff90 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff2d 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff42 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff35 	bl	8001190 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b08b      	sub	sp, #44	; 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e148      	b.n	80015ee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800135c:	2201      	movs	r2, #1
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8137 	bne.w	80015e8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4aa3      	ldr	r2, [pc, #652]	; (800160c <HAL_GPIO_Init+0x2c4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d05e      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001384:	4aa1      	ldr	r2, [pc, #644]	; (800160c <HAL_GPIO_Init+0x2c4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d875      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 800138a:	4aa1      	ldr	r2, [pc, #644]	; (8001610 <HAL_GPIO_Init+0x2c8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d058      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001390:	4a9f      	ldr	r2, [pc, #636]	; (8001610 <HAL_GPIO_Init+0x2c8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d86f      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 8001396:	4a9f      	ldr	r2, [pc, #636]	; (8001614 <HAL_GPIO_Init+0x2cc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d052      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 800139c:	4a9d      	ldr	r2, [pc, #628]	; (8001614 <HAL_GPIO_Init+0x2cc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d869      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013a2:	4a9d      	ldr	r2, [pc, #628]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d04c      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013a8:	4a9b      	ldr	r2, [pc, #620]	; (8001618 <HAL_GPIO_Init+0x2d0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d863      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ae:	4a9b      	ldr	r2, [pc, #620]	; (800161c <HAL_GPIO_Init+0x2d4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d046      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013b4:	4a99      	ldr	r2, [pc, #612]	; (800161c <HAL_GPIO_Init+0x2d4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d85d      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d82a      	bhi.n	8001414 <HAL_GPIO_Init+0xcc>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d859      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013c2:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <HAL_GPIO_Init+0x80>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	08001443 	.word	0x08001443
 80013cc:	0800141d 	.word	0x0800141d
 80013d0:	0800142f 	.word	0x0800142f
 80013d4:	08001471 	.word	0x08001471
 80013d8:	08001477 	.word	0x08001477
 80013dc:	08001477 	.word	0x08001477
 80013e0:	08001477 	.word	0x08001477
 80013e4:	08001477 	.word	0x08001477
 80013e8:	08001477 	.word	0x08001477
 80013ec:	08001477 	.word	0x08001477
 80013f0:	08001477 	.word	0x08001477
 80013f4:	08001477 	.word	0x08001477
 80013f8:	08001477 	.word	0x08001477
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001477 	.word	0x08001477
 8001404:	08001477 	.word	0x08001477
 8001408:	08001477 	.word	0x08001477
 800140c:	08001425 	.word	0x08001425
 8001410:	08001439 	.word	0x08001439
 8001414:	4a82      	ldr	r2, [pc, #520]	; (8001620 <HAL_GPIO_Init+0x2d8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141a:	e02c      	b.n	8001476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e029      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e024      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	3308      	adds	r3, #8
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e01f      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	330c      	adds	r3, #12
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e01a      	b.n	8001478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144a:	2304      	movs	r3, #4
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e013      	b.n	8001478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	611a      	str	r2, [r3, #16]
          break;
 8001462:	e009      	b.n	8001478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	615a      	str	r2, [r3, #20]
          break;
 800146e:	e003      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x130>
          break;
 8001476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	; 0xff
 800147c:	d801      	bhi.n	8001482 <HAL_GPIO_Init+0x13a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_Init+0x13e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2bff      	cmp	r3, #255	; 0xff
 800148c:	d802      	bhi.n	8001494 <HAL_GPIO_Init+0x14c>
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x152>
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	3b08      	subs	r3, #8
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	210f      	movs	r1, #15
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	6a39      	ldr	r1, [r7, #32]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8090 	beq.w	80015e8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c8:	4b56      	ldr	r3, [pc, #344]	; (8001624 <HAL_GPIO_Init+0x2dc>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a55      	ldr	r2, [pc, #340]	; (8001624 <HAL_GPIO_Init+0x2dc>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_GPIO_Init+0x2dc>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e0:	4a51      	ldr	r2, [pc, #324]	; (8001628 <HAL_GPIO_Init+0x2e0>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a49      	ldr	r2, [pc, #292]	; (800162c <HAL_GPIO_Init+0x2e4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d00d      	beq.n	8001528 <HAL_GPIO_Init+0x1e0>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a48      	ldr	r2, [pc, #288]	; (8001630 <HAL_GPIO_Init+0x2e8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d007      	beq.n	8001524 <HAL_GPIO_Init+0x1dc>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a47      	ldr	r2, [pc, #284]	; (8001634 <HAL_GPIO_Init+0x2ec>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d101      	bne.n	8001520 <HAL_GPIO_Init+0x1d8>
 800151c:	2302      	movs	r3, #2
 800151e:	e004      	b.n	800152a <HAL_GPIO_Init+0x1e2>
 8001520:	2303      	movs	r3, #3
 8001522:	e002      	b.n	800152a <HAL_GPIO_Init+0x1e2>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_GPIO_Init+0x1e2>
 8001528:	2300      	movs	r3, #0
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	f002 0203 	and.w	r2, r2, #3
 8001530:	0092      	lsls	r2, r2, #2
 8001532:	4093      	lsls	r3, r2
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800153a:	493b      	ldr	r1, [pc, #236]	; (8001628 <HAL_GPIO_Init+0x2e0>)
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4937      	ldr	r1, [pc, #220]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001562:	4b35      	ldr	r3, [pc, #212]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	43db      	mvns	r3, r3
 800156a:	4933      	ldr	r1, [pc, #204]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 800156c:	4013      	ands	r3, r2
 800156e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	492d      	ldr	r1, [pc, #180]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800158a:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	43db      	mvns	r3, r3
 8001592:	4929      	ldr	r1, [pc, #164]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 8001594:	4013      	ands	r3, r2
 8001596:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4923      	ldr	r1, [pc, #140]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	491f      	ldr	r1, [pc, #124]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4919      	ldr	r1, [pc, #100]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4915      	ldr	r1, [pc, #84]	; (8001638 <HAL_GPIO_Init+0x2f0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	3301      	adds	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f47f aeaf 	bne.w	800135c <HAL_GPIO_Init+0x14>
  }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	372c      	adds	r7, #44	; 0x2c
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	10320000 	.word	0x10320000
 8001610:	10310000 	.word	0x10310000
 8001614:	10220000 	.word	0x10220000
 8001618:	10210000 	.word	0x10210000
 800161c:	10120000 	.word	0x10120000
 8001620:	10110000 	.word	0x10110000
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	40010800 	.word	0x40010800
 8001630:	40010c00 	.word	0x40010c00
 8001634:	40011000 	.word	0x40011000
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	807b      	strh	r3, [r7, #2]
 8001676:	4613      	mov	r3, r2
 8001678:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167a:	787b      	ldrb	r3, [r7, #1]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001680:	887a      	ldrh	r2, [r7, #2]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001686:	e003      	b.n	8001690 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ac:	887a      	ldrh	r2, [r7, #2]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	041a      	lsls	r2, r3, #16
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	400b      	ands	r3, r1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e26c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8087 	beq.w	80017fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ec:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d00c      	beq.n	8001712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f8:	4b8f      	ldr	r3, [pc, #572]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b08      	cmp	r3, #8
 8001702:	d112      	bne.n	800172a <HAL_RCC_OscConfig+0x5e>
 8001704:	4b8c      	ldr	r3, [pc, #560]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d10b      	bne.n	800172a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001712:	4b89      	ldr	r3, [pc, #548]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d06c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x12c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d168      	bne.n	80017f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e246      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x76>
 8001734:	4b80      	ldr	r3, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a7f      	ldr	r2, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e02e      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x98>
 800174a:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7a      	ldr	r2, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b78      	ldr	r3, [pc, #480]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a77      	ldr	r2, [pc, #476]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e01d      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0xbc>
 800176e:	4b72      	ldr	r3, [pc, #456]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a71      	ldr	r2, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001788:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6a      	ldr	r2, [pc, #424]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a67      	ldr	r2, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fcb6 	bl	8001118 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fcb2 	bl	8001118 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e1fa      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe4>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fca2 	bl	8001118 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fc9e 	bl	8001118 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1e6      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x10c>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d063      	beq.n	80018ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001806:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00b      	beq.n	800182a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d11c      	bne.n	8001858 <HAL_RCC_OscConfig+0x18c>
 800181e:	4b46      	ldr	r3, [pc, #280]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x176>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e1ba      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4939      	ldr	r1, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	e03a      	b.n	80018ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d020      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_RCC_OscConfig+0x270>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff fc57 	bl	8001118 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fc53 	bl	8001118 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e19b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4927      	ldr	r1, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
 80018a0:	e015      	b.n	80018ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_RCC_OscConfig+0x270>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fc36 	bl	8001118 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fc32 	bl	8001118 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e17a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d03a      	beq.n	8001950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d019      	beq.n	8001916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fc16 	bl	8001118 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f0:	f7ff fc12 	bl	8001118 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e15a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f000 fa9a 	bl	8001e48 <RCC_Delay>
 8001914:	e01c      	b.n	8001950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fbfc 	bl	8001118 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001922:	e00f      	b.n	8001944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fbf8 	bl	8001118 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d908      	bls.n	8001944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e140      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	42420000 	.word	0x42420000
 8001940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	4b9e      	ldr	r3, [pc, #632]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1e9      	bne.n	8001924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a6 	beq.w	8001aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b97      	ldr	r3, [pc, #604]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10d      	bne.n	800198a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b94      	ldr	r3, [pc, #592]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a93      	ldr	r2, [pc, #588]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b8e      	ldr	r3, [pc, #568]	; (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001996:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a8a      	ldr	r2, [pc, #552]	; (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fbb9 	bl	8001118 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7ff fbb5 	bl	8001118 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b64      	cmp	r3, #100	; 0x64
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0fd      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	4b81      	ldr	r3, [pc, #516]	; (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x312>
 80019d0:	4b7b      	ldr	r3, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a7a      	ldr	r2, [pc, #488]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	e02d      	b.n	8001a3a <HAL_RCC_OscConfig+0x36e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x334>
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a72      	ldr	r2, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6213      	str	r3, [r2, #32]
 80019fe:	e01c      	b.n	8001a3a <HAL_RCC_OscConfig+0x36e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x356>
 8001a08:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a6c      	ldr	r2, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a69      	ldr	r2, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	e00b      	b.n	8001a3a <HAL_RCC_OscConfig+0x36e>
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a66      	ldr	r2, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a63      	ldr	r2, [pc, #396]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d015      	beq.n	8001a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fb69 	bl	8001118 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fb65 	bl	8001118 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0ab      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ee      	beq.n	8001a4a <HAL_RCC_OscConfig+0x37e>
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb53 	bl	8001118 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff fb4f 	bl	8001118 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e095      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ee      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8081 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d061      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d146      	bne.n	8001b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <HAL_RCC_OscConfig+0x4fc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff fb23 	bl	8001118 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff fb1f 	bl	8001118 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e067      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d108      	bne.n	8001b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	492d      	ldr	r1, [pc, #180]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a19      	ldr	r1, [r3, #32]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	430b      	orrs	r3, r1
 8001b22:	4927      	ldr	r1, [pc, #156]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x4fc>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff faf3 	bl	8001118 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff faef 	bl	8001118 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e037      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46a>
 8001b54:	e02f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_RCC_OscConfig+0x4fc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fadc 	bl	8001118 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff fad8 	bl	8001118 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e020      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x498>
 8001b82:	e018      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e013      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	42420060 	.word	0x42420060

08001bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0d0      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d910      	bls.n	8001c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4965      	ldr	r1, [pc, #404]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0b8      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	494d      	ldr	r1, [pc, #308]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d040      	beq.n	8001cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d115      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e07f      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e073      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e06b      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001caa:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f023 0203 	bic.w	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4936      	ldr	r1, [pc, #216]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff fa2c 	bl	8001118 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc4:	f7ff fa28 	bl	8001118 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e053      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 020c 	and.w	r2, r3, #12
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d1eb      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d210      	bcs.n	8001d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0207 	bic.w	r2, r3, #7
 8001d02:	4922      	ldr	r1, [pc, #136]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e032      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4916      	ldr	r1, [pc, #88]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d5a:	f000 f821 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	490a      	ldr	r1, [pc, #40]	; (8001d94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6c:	5ccb      	ldrb	r3, [r1, r3]
 8001d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1cc>)
 8001d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1d0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f98a 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	080026b8 	.word	0x080026b8
 8001d98:	20000010 	.word	0x20000010
 8001d9c:	20000014 	.word	0x20000014

08001da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d002      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d003      	beq.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dce:	e027      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dd2:	613b      	str	r3, [r7, #16]
      break;
 8001dd4:	e027      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	0c9b      	lsrs	r3, r3, #18
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d010      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	0c5b      	lsrs	r3, r3, #17
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
 8001dfc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e02:	fb02 f203 	mul.w	r2, r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e004      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	613b      	str	r3, [r7, #16]
      break;
 8001e1e:	e002      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e22:	613b      	str	r3, [r7, #16]
      break;
 8001e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e26:	693b      	ldr	r3, [r7, #16]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	007a1200 	.word	0x007a1200
 8001e3c:	080026c8 	.word	0x080026c8
 8001e40:	080026d8 	.word	0x080026d8
 8001e44:	003d0900 	.word	0x003d0900

08001e48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <RCC_Delay+0x34>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <RCC_Delay+0x38>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0a5b      	lsrs	r3, r3, #9
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e64:	bf00      	nop
  }
  while (Delay --);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1e5a      	subs	r2, r3, #1
 8001e6a:	60fa      	str	r2, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f9      	bne.n	8001e64 <RCC_Delay+0x1c>
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	20000010 	.word	0x20000010
 8001e80:	10624dd3 	.word	0x10624dd3

08001e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e041      	b.n	8001f1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe ffca 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 fa56 	bl	8002374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d001      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e035      	b.n	8001fa8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_TIM_Base_Start_IT+0x90>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_TIM_Base_Start_IT+0x4e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f66:	d004      	beq.n	8001f72 <HAL_TIM_Base_Start_IT+0x4e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_TIM_Base_Start_IT+0x94>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d111      	bne.n	8001f96 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	d010      	beq.n	8001fa6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f94:	e007      	b.n	8001fa6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40012c00 	.word	0x40012c00
 8001fb8:	40000400 	.word	0x40000400

08001fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0202 	mvn.w	r2, #2
 8001ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f998 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f98b 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f99a 	bl	800234e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0204 	mvn.w	r2, #4
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f972 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f965 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f974 	bl	800234e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d020      	beq.n	80020b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0208 	mvn.w	r2, #8
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f94c 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f93f 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f94e 	bl	800234e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d020      	beq.n	8002104 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01b      	beq.n	8002104 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0210 	mvn.w	r2, #16
 80020d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2208      	movs	r2, #8
 80020da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f926 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f919 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f928 	bl	800234e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0201 	mvn.w	r2, #1
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fe4a 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00c      	beq.n	800214c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fa6f 	bl	800262a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00c      	beq.n	8002170 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8f8 	bl	8002360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0220 	mvn.w	r2, #32
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa42 	bl	8002618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_TIM_ConfigClockSource+0x1c>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e0b4      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x186>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f0:	d03e      	beq.n	8002270 <HAL_TIM_ConfigClockSource+0xd4>
 80021f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f6:	f200 8087 	bhi.w	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 80021fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fe:	f000 8086 	beq.w	800230e <HAL_TIM_ConfigClockSource+0x172>
 8002202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002206:	d87f      	bhi.n	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 8002208:	2b70      	cmp	r3, #112	; 0x70
 800220a:	d01a      	beq.n	8002242 <HAL_TIM_ConfigClockSource+0xa6>
 800220c:	2b70      	cmp	r3, #112	; 0x70
 800220e:	d87b      	bhi.n	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 8002210:	2b60      	cmp	r3, #96	; 0x60
 8002212:	d050      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002214:	2b60      	cmp	r3, #96	; 0x60
 8002216:	d877      	bhi.n	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 8002218:	2b50      	cmp	r3, #80	; 0x50
 800221a:	d03c      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0xfa>
 800221c:	2b50      	cmp	r3, #80	; 0x50
 800221e:	d873      	bhi.n	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 8002220:	2b40      	cmp	r3, #64	; 0x40
 8002222:	d058      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002224:	2b40      	cmp	r3, #64	; 0x40
 8002226:	d86f      	bhi.n	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 8002228:	2b30      	cmp	r3, #48	; 0x30
 800222a:	d064      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0x15a>
 800222c:	2b30      	cmp	r3, #48	; 0x30
 800222e:	d86b      	bhi.n	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 8002230:	2b20      	cmp	r3, #32
 8002232:	d060      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002234:	2b20      	cmp	r3, #32
 8002236:	d867      	bhi.n	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 8002238:	2b00      	cmp	r3, #0
 800223a:	d05c      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0x15a>
 800223c:	2b10      	cmp	r3, #16
 800223e:	d05a      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002240:	e062      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6899      	ldr	r1, [r3, #8]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f000 f96a 	bl	800252a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	609a      	str	r2, [r3, #8]
      break;
 800226e:	e04f      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6899      	ldr	r1, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f000 f953 	bl	800252a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002292:	609a      	str	r2, [r3, #8]
      break;
 8002294:	e03c      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6859      	ldr	r1, [r3, #4]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f000 f8ca 	bl	800243c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2150      	movs	r1, #80	; 0x50
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f921 	bl	80024f6 <TIM_ITRx_SetConfig>
      break;
 80022b4:	e02c      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f000 f8e8 	bl	8002498 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2160      	movs	r1, #96	; 0x60
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f911 	bl	80024f6 <TIM_ITRx_SetConfig>
      break;
 80022d4:	e01c      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f000 f8aa 	bl	800243c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2140      	movs	r1, #64	; 0x40
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f901 	bl	80024f6 <TIM_ITRx_SetConfig>
      break;
 80022f4:	e00c      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	4610      	mov	r0, r2
 8002302:	f000 f8f8 	bl	80024f6 <TIM_ITRx_SetConfig>
      break;
 8002306:	e003      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      break;
 800230c:	e000      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800230e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
	...

08002374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <TIM_Base_SetConfig+0xc0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d007      	beq.n	800239c <TIM_Base_SetConfig+0x28>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0x28>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a28      	ldr	r2, [pc, #160]	; (8002438 <TIM_Base_SetConfig+0xc4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <TIM_Base_SetConfig+0xc0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x52>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x52>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <TIM_Base_SetConfig+0xc4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <TIM_Base_SetConfig+0xc0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d103      	bne.n	800240c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f023 0201 	bic.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]
  }
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400

0800243c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f023 0201 	bic.w	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f023 030a 	bic.w	r3, r3, #10
 8002478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f023 0210 	bic.w	r2, r3, #16
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	f043 0307 	orr.w	r3, r3, #7
 8002518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	609a      	str	r2, [r3, #8]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002544:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	431a      	orrs	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	609a      	str	r2, [r3, #8]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800257c:	2302      	movs	r3, #2
 800257e:	e041      	b.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d009      	beq.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d004      	beq.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a10      	ldr	r2, [pc, #64]	; (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10c      	bne.n	80025f2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40012c00 	.word	0x40012c00
 8002614:	40000400 	.word	0x40000400

08002618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <__libc_init_array>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	2600      	movs	r6, #0
 8002640:	4d0c      	ldr	r5, [pc, #48]	; (8002674 <__libc_init_array+0x38>)
 8002642:	4c0d      	ldr	r4, [pc, #52]	; (8002678 <__libc_init_array+0x3c>)
 8002644:	1b64      	subs	r4, r4, r5
 8002646:	10a4      	asrs	r4, r4, #2
 8002648:	42a6      	cmp	r6, r4
 800264a:	d109      	bne.n	8002660 <__libc_init_array+0x24>
 800264c:	f000 f822 	bl	8002694 <_init>
 8002650:	2600      	movs	r6, #0
 8002652:	4d0a      	ldr	r5, [pc, #40]	; (800267c <__libc_init_array+0x40>)
 8002654:	4c0a      	ldr	r4, [pc, #40]	; (8002680 <__libc_init_array+0x44>)
 8002656:	1b64      	subs	r4, r4, r5
 8002658:	10a4      	asrs	r4, r4, #2
 800265a:	42a6      	cmp	r6, r4
 800265c:	d105      	bne.n	800266a <__libc_init_array+0x2e>
 800265e:	bd70      	pop	{r4, r5, r6, pc}
 8002660:	f855 3b04 	ldr.w	r3, [r5], #4
 8002664:	4798      	blx	r3
 8002666:	3601      	adds	r6, #1
 8002668:	e7ee      	b.n	8002648 <__libc_init_array+0xc>
 800266a:	f855 3b04 	ldr.w	r3, [r5], #4
 800266e:	4798      	blx	r3
 8002670:	3601      	adds	r6, #1
 8002672:	e7f2      	b.n	800265a <__libc_init_array+0x1e>
 8002674:	080026dc 	.word	0x080026dc
 8002678:	080026dc 	.word	0x080026dc
 800267c:	080026dc 	.word	0x080026dc
 8002680:	080026e0 	.word	0x080026e0

08002684 <memset>:
 8002684:	4603      	mov	r3, r0
 8002686:	4402      	add	r2, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	d100      	bne.n	800268e <memset+0xa>
 800268c:	4770      	bx	lr
 800268e:	f803 1b01 	strb.w	r1, [r3], #1
 8002692:	e7f9      	b.n	8002688 <memset+0x4>

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
