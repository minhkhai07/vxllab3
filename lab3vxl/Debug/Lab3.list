
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002928  08002928  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002928  08002928  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002928  08002928  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800292c  0800292c  0001292c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000001c  0800294c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800294c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000979b  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8f  00000000  00000000  000297e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dd9  00000000  00000000  0002c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfed  00000000  00000000  00043619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082162  00000000  00000000  0004f606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1768  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000d17bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028e0 	.word	0x080028e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080028e0 	.word	0x080028e0

0800014c <display7SEG_NB>:
 */
#include "7seg_display.h"
int led_NB;
int led_DT;
int led_Tg;
void display7SEG_NB(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint8_t segmentPattern[] = {
 8000154:	4a39      	ldr	r2, [pc, #228]	; (800023c <display7SEG_NB+0xf0>)
 8000156:	f107 030c 	add.w	r3, r7, #12
 800015a:	ca07      	ldmia	r2, {r0, r1, r2}
 800015c:	c303      	stmia	r3!, {r0, r1}
 800015e:	801a      	strh	r2, [r3, #0]
    0b01101101,
    0b01111101,
    0b00000111,
    0b01111111,
    0b01101111 };
  if (num < 0 || num > 9) {
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b00      	cmp	r3, #0
 8000164:	db02      	blt.n	800016c <display7SEG_NB+0x20>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b09      	cmp	r3, #9
 800016a:	dd01      	ble.n	8000170 <display7SEG_NB+0x24>
    num = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	607b      	str	r3, [r7, #4]
  }
  uint8_t pattern = segmentPattern[num];
 8000170:	f107 020c 	add.w	r2, r7, #12
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	75fb      	strb	r3, [r7, #23]
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); //A
 800017c:	7dfb      	ldrb	r3, [r7, #23]
 800017e:	f003 0301 	and.w	r3, r3, #1
 8000182:	2b00      	cmp	r3, #0
 8000184:	bf0c      	ite	eq
 8000186:	2301      	moveq	r3, #1
 8000188:	2300      	movne	r3, #0
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	2101      	movs	r1, #1
 8000190:	482b      	ldr	r0, [pc, #172]	; (8000240 <display7SEG_NB+0xf4>)
 8000192:	f001 fb90 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); //B
 8000196:	7dfb      	ldrb	r3, [r7, #23]
 8000198:	f003 0302 	and.w	r3, r3, #2
 800019c:	2b00      	cmp	r3, #0
 800019e:	bf0c      	ite	eq
 80001a0:	2301      	moveq	r3, #1
 80001a2:	2300      	movne	r3, #0
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	461a      	mov	r2, r3
 80001a8:	2102      	movs	r1, #2
 80001aa:	4825      	ldr	r0, [pc, #148]	; (8000240 <display7SEG_NB+0xf4>)
 80001ac:	f001 fb83 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); //C
 80001b0:	7dfb      	ldrb	r3, [r7, #23]
 80001b2:	f003 0304 	and.w	r3, r3, #4
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	bf0c      	ite	eq
 80001ba:	2301      	moveq	r3, #1
 80001bc:	2300      	movne	r3, #0
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	461a      	mov	r2, r3
 80001c2:	2104      	movs	r1, #4
 80001c4:	481e      	ldr	r0, [pc, #120]	; (8000240 <display7SEG_NB+0xf4>)
 80001c6:	f001 fb76 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 80001ca:	7dfb      	ldrb	r3, [r7, #23]
 80001cc:	f003 0308 	and.w	r3, r3, #8
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	bf0c      	ite	eq
 80001d4:	2301      	moveq	r3, #1
 80001d6:	2300      	movne	r3, #0
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	461a      	mov	r2, r3
 80001dc:	2108      	movs	r1, #8
 80001de:	4818      	ldr	r0, [pc, #96]	; (8000240 <display7SEG_NB+0xf4>)
 80001e0:	f001 fb69 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 80001e4:	7dfb      	ldrb	r3, [r7, #23]
 80001e6:	f003 0310 	and.w	r3, r3, #16
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	bf0c      	ite	eq
 80001ee:	2301      	moveq	r3, #1
 80001f0:	2300      	movne	r3, #0
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	2110      	movs	r1, #16
 80001f8:	4811      	ldr	r0, [pc, #68]	; (8000240 <display7SEG_NB+0xf4>)
 80001fa:	f001 fb5c 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 80001fe:	7dfb      	ldrb	r3, [r7, #23]
 8000200:	f003 0320 	and.w	r3, r3, #32
 8000204:	2b00      	cmp	r3, #0
 8000206:	bf0c      	ite	eq
 8000208:	2301      	moveq	r3, #1
 800020a:	2300      	movne	r3, #0
 800020c:	b2db      	uxtb	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	2120      	movs	r1, #32
 8000212:	480b      	ldr	r0, [pc, #44]	; (8000240 <display7SEG_NB+0xf4>)
 8000214:	f001 fb4f 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); //G
 8000218:	7dfb      	ldrb	r3, [r7, #23]
 800021a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800021e:	2b00      	cmp	r3, #0
 8000220:	bf0c      	ite	eq
 8000222:	2301      	moveq	r3, #1
 8000224:	2300      	movne	r3, #0
 8000226:	b2db      	uxtb	r3, r3
 8000228:	461a      	mov	r2, r3
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <display7SEG_NB+0xf4>)
 800022e:	f001 fb42 	bl	80018b6 <HAL_GPIO_WritePin>
  }
 8000232:	bf00      	nop
 8000234:	3718      	adds	r7, #24
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	080028f8 	.word	0x080028f8
 8000240:	40010c00 	.word	0x40010c00

08000244 <display7SEG_DT>:
void display7SEG_DT(int num) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  uint8_t segmentPattern[] = {
 800024c:	4a3c      	ldr	r2, [pc, #240]	; (8000340 <display7SEG_DT+0xfc>)
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	ca07      	ldmia	r2, {r0, r1, r2}
 8000254:	c303      	stmia	r3!, {r0, r1}
 8000256:	801a      	strh	r2, [r3, #0]
    0b01101101,
    0b01111101,
    0b00000111,
    0b01111111,
    0b01101111 };
  if (num < 0 || num > 9) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b00      	cmp	r3, #0
 800025c:	db02      	blt.n	8000264 <display7SEG_DT+0x20>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2b09      	cmp	r3, #9
 8000262:	dd01      	ble.n	8000268 <display7SEG_DT+0x24>
    num = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
  }
  uint8_t pattern = segmentPattern[num];
 8000268:	f107 020c 	add.w	r2, r7, #12
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4413      	add	r3, r2
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	75fb      	strb	r3, [r7, #23]
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); //A
 8000274:	7dfb      	ldrb	r3, [r7, #23]
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	2b00      	cmp	r3, #0
 800027c:	bf0c      	ite	eq
 800027e:	2301      	moveq	r3, #1
 8000280:	2300      	movne	r3, #0
 8000282:	b2db      	uxtb	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	482e      	ldr	r0, [pc, #184]	; (8000344 <display7SEG_DT+0x100>)
 800028a:	f001 fb14 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); //B
 800028e:	7dfb      	ldrb	r3, [r7, #23]
 8000290:	f003 0302 	and.w	r3, r3, #2
 8000294:	2b00      	cmp	r3, #0
 8000296:	bf0c      	ite	eq
 8000298:	2301      	moveq	r3, #1
 800029a:	2300      	movne	r3, #0
 800029c:	b2db      	uxtb	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4827      	ldr	r0, [pc, #156]	; (8000344 <display7SEG_DT+0x100>)
 80002a6:	f001 fb06 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); //C
 80002aa:	7dfb      	ldrb	r3, [r7, #23]
 80002ac:	f003 0304 	and.w	r3, r3, #4
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	bf0c      	ite	eq
 80002b4:	2301      	moveq	r3, #1
 80002b6:	2300      	movne	r3, #0
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c0:	4820      	ldr	r0, [pc, #128]	; (8000344 <display7SEG_DT+0x100>)
 80002c2:	f001 faf8 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 80002c6:	7dfb      	ldrb	r3, [r7, #23]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002dc:	4819      	ldr	r0, [pc, #100]	; (8000344 <display7SEG_DT+0x100>)
 80002de:	f001 faea 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 80002e2:	7dfb      	ldrb	r3, [r7, #23]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f8:	4812      	ldr	r0, [pc, #72]	; (8000344 <display7SEG_DT+0x100>)
 80002fa:	f001 fadc 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 80002fe:	7dfb      	ldrb	r3, [r7, #23]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	2b00      	cmp	r3, #0
 8000306:	bf0c      	ite	eq
 8000308:	2301      	moveq	r3, #1
 800030a:	2300      	movne	r3, #0
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000314:	480b      	ldr	r0, [pc, #44]	; (8000344 <display7SEG_DT+0x100>)
 8000316:	f001 face 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); //G
 800031a:	7dfb      	ldrb	r3, [r7, #23]
 800031c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000320:	2b00      	cmp	r3, #0
 8000322:	bf0c      	ite	eq
 8000324:	2301      	moveq	r3, #1
 8000326:	2300      	movne	r3, #0
 8000328:	b2db      	uxtb	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <display7SEG_DT+0x100>)
 8000332:	f001 fac0 	bl	80018b6 <HAL_GPIO_WritePin>
  }
 8000336:	bf00      	nop
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	080028f8 	.word	0x080028f8
 8000344:	40010c00 	.word	0x40010c00

08000348 <display7SEG_Tg>:
void display7SEG_Tg(int num) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  uint8_t segmentPattern[] = {
 8000350:	4a3c      	ldr	r2, [pc, #240]	; (8000444 <display7SEG_Tg+0xfc>)
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	ca07      	ldmia	r2, {r0, r1, r2}
 8000358:	c303      	stmia	r3!, {r0, r1}
 800035a:	801a      	strh	r2, [r3, #0]
    0b01101101,
    0b01111101,
    0b00000111,
    0b01111111,
    0b01101111 };
  if (num < 0 || num > 9) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	db02      	blt.n	8000368 <display7SEG_Tg+0x20>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b09      	cmp	r3, #9
 8000366:	dd01      	ble.n	800036c <display7SEG_Tg+0x24>
    num = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
  }
  uint8_t pattern = segmentPattern[num];
 800036c:	f107 020c 	add.w	r2, r7, #12
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	75fb      	strb	r3, [r7, #23]
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, (pattern & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET); //A
 8000378:	7dfb      	ldrb	r3, [r7, #23]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	bf0c      	ite	eq
 8000382:	2301      	moveq	r3, #1
 8000384:	2300      	movne	r3, #0
 8000386:	b2db      	uxtb	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038e:	482e      	ldr	r0, [pc, #184]	; (8000448 <display7SEG_Tg+0x100>)
 8000390:	f001 fa91 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (pattern & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET); //B
 8000394:	7dfb      	ldrb	r3, [r7, #23]
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	2b00      	cmp	r3, #0
 800039c:	bf0c      	ite	eq
 800039e:	2301      	moveq	r3, #1
 80003a0:	2300      	movne	r3, #0
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	4827      	ldr	r0, [pc, #156]	; (8000448 <display7SEG_Tg+0x100>)
 80003ac:	f001 fa83 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (pattern & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET); //C
 80003b0:	7dfb      	ldrb	r3, [r7, #23]
 80003b2:	f003 0304 	and.w	r3, r3, #4
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	bf0c      	ite	eq
 80003ba:	2301      	moveq	r3, #1
 80003bc:	2300      	movne	r3, #0
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c6:	4820      	ldr	r0, [pc, #128]	; (8000448 <display7SEG_Tg+0x100>)
 80003c8:	f001 fa75 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, (pattern & 0x08) ? GPIO_PIN_RESET : GPIO_PIN_SET); // D
 80003cc:	7dfb      	ldrb	r3, [r7, #23]
 80003ce:	f003 0308 	and.w	r3, r3, #8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	bf0c      	ite	eq
 80003d6:	2301      	moveq	r3, #1
 80003d8:	2300      	movne	r3, #0
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e2:	4819      	ldr	r0, [pc, #100]	; (8000448 <display7SEG_Tg+0x100>)
 80003e4:	f001 fa67 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, (pattern & 0x10) ? GPIO_PIN_RESET : GPIO_PIN_SET); // E
 80003e8:	7dfb      	ldrb	r3, [r7, #23]
 80003ea:	f003 0310 	and.w	r3, r3, #16
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	bf0c      	ite	eq
 80003f2:	2301      	moveq	r3, #1
 80003f4:	2300      	movne	r3, #0
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	4812      	ldr	r0, [pc, #72]	; (8000448 <display7SEG_Tg+0x100>)
 8000400:	f001 fa59 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, (pattern & 0x20) ? GPIO_PIN_RESET : GPIO_PIN_SET); // F
 8000404:	7dfb      	ldrb	r3, [r7, #23]
 8000406:	f003 0320 	and.w	r3, r3, #32
 800040a:	2b00      	cmp	r3, #0
 800040c:	bf0c      	ite	eq
 800040e:	2301      	moveq	r3, #1
 8000410:	2300      	movne	r3, #0
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800041a:	480b      	ldr	r0, [pc, #44]	; (8000448 <display7SEG_Tg+0x100>)
 800041c:	f001 fa4b 	bl	80018b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (pattern & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET); //G
 8000420:	7dfb      	ldrb	r3, [r7, #23]
 8000422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000426:	2b00      	cmp	r3, #0
 8000428:	bf0c      	ite	eq
 800042a:	2301      	moveq	r3, #1
 800042c:	2300      	movne	r3, #0
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000436:	4804      	ldr	r0, [pc, #16]	; (8000448 <display7SEG_Tg+0x100>)
 8000438:	f001 fa3d 	bl	80018b6 <HAL_GPIO_WritePin>
  }
 800043c:	bf00      	nop
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	080028f8 	.word	0x080028f8
 8000448:	40010800 	.word	0x40010800

0800044c <displayNB_showTime>:
void displayNB_showTime(int time) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
    display7SEG_Tg(time/10);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <displayNB_showTime+0x44>)
 8000458:	fb82 1203 	smull	r1, r2, r2, r3
 800045c:	1092      	asrs	r2, r2, #2
 800045e:	17db      	asrs	r3, r3, #31
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff70 	bl	8000348 <display7SEG_Tg>
    display7SEG_NB(time%10);
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <displayNB_showTime+0x44>)
 800046c:	fb83 1302 	smull	r1, r3, r3, r2
 8000470:	1099      	asrs	r1, r3, #2
 8000472:	17d3      	asrs	r3, r2, #31
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	460b      	mov	r3, r1
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	440b      	add	r3, r1
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	1ad1      	subs	r1, r2, r3
 8000480:	4608      	mov	r0, r1
 8000482:	f7ff fe63 	bl	800014c <display7SEG_NB>
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	66666667 	.word	0x66666667

08000494 <displayDT_showTime>:
void displayDT_showTime(int time) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    display7SEG_Tg(time/10);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <displayDT_showTime+0x44>)
 80004a0:	fb82 1203 	smull	r1, r2, r2, r3
 80004a4:	1092      	asrs	r2, r2, #2
 80004a6:	17db      	asrs	r3, r3, #31
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff4c 	bl	8000348 <display7SEG_Tg>
    display7SEG_DT(time%10);
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <displayDT_showTime+0x44>)
 80004b4:	fb83 1302 	smull	r1, r3, r3, r2
 80004b8:	1099      	asrs	r1, r3, #2
 80004ba:	17d3      	asrs	r3, r2, #31
 80004bc:	1ac9      	subs	r1, r1, r3
 80004be:	460b      	mov	r3, r1
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	440b      	add	r3, r1
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	1ad1      	subs	r1, r2, r3
 80004c8:	4608      	mov	r0, r1
 80004ca:	f7ff febb 	bl	8000244 <display7SEG_DT>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	66666667 	.word	0x66666667

080004dc <display_showMode>:
void display_showMode(int mode) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    display7SEG_Tg(mode/100);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <display_showMode+0x44>)
 80004e8:	fb82 1203 	smull	r1, r2, r2, r3
 80004ec:	1152      	asrs	r2, r2, #5
 80004ee:	17db      	asrs	r3, r3, #31
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff28 	bl	8000348 <display7SEG_Tg>
    display7SEG_DT(mode%10);
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <display_showMode+0x48>)
 80004fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000500:	1099      	asrs	r1, r3, #2
 8000502:	17d3      	asrs	r3, r2, #31
 8000504:	1ac9      	subs	r1, r1, r3
 8000506:	460b      	mov	r3, r1
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	440b      	add	r3, r1
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	1ad1      	subs	r1, r2, r3
 8000510:	4608      	mov	r0, r1
 8000512:	f7ff fe97 	bl	8000244 <display7SEG_DT>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	51eb851f 	.word	0x51eb851f
 8000524:	66666667 	.word	0x66666667

08000528 <isButton1Pressed>:

int TimeOutForKeyPress[NUM_BUTTONS]=  {500,500,500};
int button1_pressed[NUM_BUTTONS] = {0,0,0};
int button1_long_pressed[NUM_BUTTONS] = {0,0,0};

int isButton1Pressed(int index){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if(button1_pressed[index] == 1){
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <isButton1Pressed+0x30>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <isButton1Pressed+0x22>
		button1_pressed[index] = 0;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <isButton1Pressed+0x30>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2100      	movs	r1, #0
 8000542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <isButton1Pressed+0x24>
	}
	return 0;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000038 	.word	0x20000038

0800055c <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index){
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	//TODO
	button1_pressed[index] = 1;
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <subKeyProcess+0x1c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2101      	movs	r1, #1
 800056a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000038 	.word	0x20000038

0800057c <getKeyInput>:

void getKeyInput(){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
for(int i=0; i<NUM_BUTTONS;i++){
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	e08c      	b.n	80006a2 <getKeyInput+0x126>
  KeyReg0[i] = KeyReg1[i];
 8000588:	4a4a      	ldr	r2, [pc, #296]	; (80006b4 <getKeyInput+0x138>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000590:	4949      	ldr	r1, [pc, #292]	; (80006b8 <getKeyInput+0x13c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg2[i];
 8000598:	4a48      	ldr	r2, [pc, #288]	; (80006bc <getKeyInput+0x140>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a0:	4944      	ldr	r1, [pc, #272]	; (80006b4 <getKeyInput+0x138>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  // Add your key
  if(i==0)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d109      	bne.n	80005c2 <getKeyInput+0x46>
  {
	  KeyReg2[0] = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80005ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b2:	4843      	ldr	r0, [pc, #268]	; (80006c0 <getKeyInput+0x144>)
 80005b4:	f001 f968 	bl	8001888 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b3f      	ldr	r3, [pc, #252]	; (80006bc <getKeyInput+0x140>)
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e018      	b.n	80005f4 <getKeyInput+0x78>
  }
  else if(i==1){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d109      	bne.n	80005dc <getKeyInput+0x60>
	  KeyReg2[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80005c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005cc:	483c      	ldr	r0, [pc, #240]	; (80006c0 <getKeyInput+0x144>)
 80005ce:	f001 f95b 	bl	8001888 <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b39      	ldr	r3, [pc, #228]	; (80006bc <getKeyInput+0x140>)
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	e00b      	b.n	80005f4 <getKeyInput+0x78>
  }
  else if(i==2){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d108      	bne.n	80005f4 <getKeyInput+0x78>
	  KeyReg2[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80005e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e6:	4836      	ldr	r0, [pc, #216]	; (80006c0 <getKeyInput+0x144>)
 80005e8:	f001 f94e 	bl	8001888 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <getKeyInput+0x140>)
 80005f2:	609a      	str	r2, [r3, #8]
  }

  if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80005f4:	4a30      	ldr	r2, [pc, #192]	; (80006b8 <getKeyInput+0x13c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fc:	492d      	ldr	r1, [pc, #180]	; (80006b4 <getKeyInput+0x138>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000604:	429a      	cmp	r2, r3
 8000606:	d149      	bne.n	800069c <getKeyInput+0x120>
 8000608:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <getKeyInput+0x138>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000610:	492a      	ldr	r1, [pc, #168]	; (80006bc <getKeyInput+0x140>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000618:	429a      	cmp	r2, r3
 800061a:	d13f      	bne.n	800069c <getKeyInput+0x120>
              if (KeyReg3[i] != KeyReg2[i]) {
 800061c:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <getKeyInput+0x148>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000624:	4925      	ldr	r1, [pc, #148]	; (80006bc <getKeyInput+0x140>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800062c:	429a      	cmp	r2, r3
 800062e:	d017      	beq.n	8000660 <getKeyInput+0xe4>
                  KeyReg3[i] = KeyReg2[i];
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <getKeyInput+0x140>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000638:	4922      	ldr	r1, [pc, #136]	; (80006c4 <getKeyInput+0x148>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  if (KeyReg2[i] == PRESSED_STATE) {
 8000640:	4a1e      	ldr	r2, [pc, #120]	; (80006bc <getKeyInput+0x140>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d127      	bne.n	800069c <getKeyInput+0x120>
                      TimeOutForKeyPress[i] = 500;  // Reset timeout khi nút nhấn
 800064c:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <getKeyInput+0x14c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                      subKeyProcess(i);  // Gọi xử lý khi nhấn nút
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff7f 	bl	800055c <subKeyProcess>
 800065e:	e01d      	b.n	800069c <getKeyInput+0x120>
                  }
              } else {
                  TimeOutForKeyPress[i]--;
 8000660:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <getKeyInput+0x14c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	4917      	ldr	r1, [pc, #92]	; (80006c8 <getKeyInput+0x14c>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  if (TimeOutForKeyPress[i] == 0) {
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <getKeyInput+0x14c>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10e      	bne.n	800069c <getKeyInput+0x120>
                      TimeOutForKeyPress[i] = 500;  // Reset timeout
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <getKeyInput+0x14c>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                      if (KeyReg2[i] == PRESSED_STATE) {
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <getKeyInput+0x140>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <getKeyInput+0x120>
                          subKeyProcess(i);  // Gọi lại khi nút được giữ lâu
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff60 	bl	800055c <subKeyProcess>
for(int i=0; i<NUM_BUTTONS;i++){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	f77f af6f 	ble.w	8000588 <getKeyInput+0xc>
                      }
                  }
              }
          }
      }
  }
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000006c 	.word	0x2000006c
 80006b8:	20000060 	.word	0x20000060
 80006bc:	20000078 	.word	0x20000078
 80006c0:	40011000 	.word	0x40011000
 80006c4:	20000054 	.word	0x20000054
 80006c8:	20000000 	.word	0x20000000

080006cc <setTimer>:
int TIMER_CYCLE = 10;

int Timer_Counter[MAX_TIMER];
int Timer_Flag[MAX_TIMER];

void setTimer(int index, int duration){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	Timer_Counter[index] = duration/TIMER_CYCLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <setTimer+0x30>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	fb92 f2f3 	sdiv	r2, r2, r3
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <setTimer+0x34>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Timer_Flag[index] = 0;
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <setTimer+0x38>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2100      	movs	r1, #0
 80006ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	2000000c 	.word	0x2000000c
 8000700:	200000ac 	.word	0x200000ac
 8000704:	20000084 	.word	0x20000084

08000708 <runTimer>:

void runTimer(void){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_TIMER;i++){
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	e016      	b.n	8000742 <runTimer+0x3a>
		Timer_Counter[i]--;
 8000714:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <runTimer+0x4c>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <runTimer+0x4c>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(Timer_Counter[i] <=0){
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <runTimer+0x4c>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072e:	2b00      	cmp	r3, #0
 8000730:	dc04      	bgt.n	800073c <runTimer+0x34>
			Timer_Flag[i] = 1;
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <runTimer+0x50>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2101      	movs	r1, #1
 8000738:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_TIMER;i++){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b09      	cmp	r3, #9
 8000746:	dde5      	ble.n	8000714 <runTimer+0xc>
		}
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	200000ac 	.word	0x200000ac
 8000758:	20000084 	.word	0x20000084

0800075c <fsm_auto_run>:
int status;
int t_red;
int t_yellow;
int t_green;
int a,b,c;
void fsm_auto_run(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	switch(status)
 8000760:	4bb1      	ldr	r3, [pc, #708]	; (8000a28 <fsm_auto_run+0x2cc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3b02      	subs	r3, #2
 8000766:	2b06      	cmp	r3, #6
 8000768:	f200 81a9 	bhi.w	8000abe <fsm_auto_run+0x362>
 800076c:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <fsm_auto_run+0x18>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000965 	.word	0x08000965
 8000778:	080009c7 	.word	0x080009c7
 800077c:	08000a49 	.word	0x08000a49
 8000780:	08000791 	.word	0x08000791
 8000784:	08000801 	.word	0x08000801
 8000788:	08000877 	.word	0x08000877
 800078c:	080008e7 	.word	0x080008e7
	{
	case cd1:
			redgreen_state();
 8000790:	f000 fcda 	bl	8001148 <redgreen_state>
			if(Timer_Flag[0])
 8000794:	4ba5      	ldr	r3, [pc, #660]	; (8000a2c <fsm_auto_run+0x2d0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d014      	beq.n	80007c6 <fsm_auto_run+0x6a>
			{
				displayNB_showTime(led_NB--);
 800079c:	4ba4      	ldr	r3, [pc, #656]	; (8000a30 <fsm_auto_run+0x2d4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	49a3      	ldr	r1, [pc, #652]	; (8000a30 <fsm_auto_run+0x2d4>)
 80007a4:	600a      	str	r2, [r1, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe50 	bl	800044c <displayNB_showTime>
				displayDT_showTime(led_DT--);
 80007ac:	4ba1      	ldr	r3, [pc, #644]	; (8000a34 <fsm_auto_run+0x2d8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	49a0      	ldr	r1, [pc, #640]	; (8000a34 <fsm_auto_run+0x2d8>)
 80007b4:	600a      	str	r2, [r1, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fe6c 	bl	8000494 <displayDT_showTime>
				setTimer(0,1000);
 80007bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ff83 	bl	80006cc <setTimer>
			}
			if(Timer_Flag[1]){
 80007c6:	4b99      	ldr	r3, [pc, #612]	; (8000a2c <fsm_auto_run+0x2d0>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <fsm_auto_run+0x88>
				led_DT=2;
 80007ce:	4b99      	ldr	r3, [pc, #612]	; (8000a34 <fsm_auto_run+0x2d8>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
				setTimer(1,2000);
 80007d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff ff77 	bl	80006cc <setTimer>
				status=cd2;
 80007de:	4b92      	ldr	r3, [pc, #584]	; (8000a28 <fsm_auto_run+0x2cc>)
 80007e0:	2206      	movs	r2, #6
 80007e2:	601a      	str	r2, [r3, #0]
				}
			if(isButton1Pressed(0))
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff fe9f 	bl	8000528 <isButton1Pressed>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	f000 8168 	beq.w	8000ac2 <fsm_auto_run+0x366>
			{
				status=MODE_2;
 80007f2:	4b8d      	ldr	r3, [pc, #564]	; (8000a28 <fsm_auto_run+0x2cc>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
				display_showMode(MODE_2);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff fe6f 	bl	80004dc <display_showMode>
			}
			break;
 80007fe:	e160      	b.n	8000ac2 <fsm_auto_run+0x366>
	case cd2:
			redyellow_state();
 8000800:	f000 fcc6 	bl	8001190 <redyellow_state>
			if(Timer_Flag[0])
 8000804:	4b89      	ldr	r3, [pc, #548]	; (8000a2c <fsm_auto_run+0x2d0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d014      	beq.n	8000836 <fsm_auto_run+0xda>
			{
				displayDT_showTime(led_DT--);
 800080c:	4b89      	ldr	r3, [pc, #548]	; (8000a34 <fsm_auto_run+0x2d8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	4988      	ldr	r1, [pc, #544]	; (8000a34 <fsm_auto_run+0x2d8>)
 8000814:	600a      	str	r2, [r1, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe3c 	bl	8000494 <displayDT_showTime>
				displayNB_showTime(led_NB--);
 800081c:	4b84      	ldr	r3, [pc, #528]	; (8000a30 <fsm_auto_run+0x2d4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	4983      	ldr	r1, [pc, #524]	; (8000a30 <fsm_auto_run+0x2d4>)
 8000824:	600a      	str	r2, [r1, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe10 	bl	800044c <displayNB_showTime>
				setTimer(0,1000);
 800082c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ff4b 	bl	80006cc <setTimer>
			}
			if(Timer_Flag[1]){
 8000836:	4b7d      	ldr	r3, [pc, #500]	; (8000a2c <fsm_auto_run+0x2d0>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00d      	beq.n	800085a <fsm_auto_run+0xfe>
				led_NB=3;
 800083e:	4b7c      	ldr	r3, [pc, #496]	; (8000a30 <fsm_auto_run+0x2d4>)
 8000840:	2203      	movs	r2, #3
 8000842:	601a      	str	r2, [r3, #0]
				led_DT=5;
 8000844:	4b7b      	ldr	r3, [pc, #492]	; (8000a34 <fsm_auto_run+0x2d8>)
 8000846:	2205      	movs	r2, #5
 8000848:	601a      	str	r2, [r3, #0]
				setTimer(1,3000);
 800084a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff3c 	bl	80006cc <setTimer>
				status=cd3;
 8000854:	4b74      	ldr	r3, [pc, #464]	; (8000a28 <fsm_auto_run+0x2cc>)
 8000856:	2207      	movs	r2, #7
 8000858:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed(0))
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fe64 	bl	8000528 <isButton1Pressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 812f 	beq.w	8000ac6 <fsm_auto_run+0x36a>
			{
				status=MODE_2;
 8000868:	4b6f      	ldr	r3, [pc, #444]	; (8000a28 <fsm_auto_run+0x2cc>)
 800086a:	2202      	movs	r2, #2
 800086c:	601a      	str	r2, [r3, #0]
				display_showMode(MODE_2);
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff fe34 	bl	80004dc <display_showMode>
			}
			break;
 8000874:	e127      	b.n	8000ac6 <fsm_auto_run+0x36a>
	case cd3:
			greenred_state();
 8000876:	f000 fcaf 	bl	80011d8 <greenred_state>
			if(Timer_Flag[0])
 800087a:	4b6c      	ldr	r3, [pc, #432]	; (8000a2c <fsm_auto_run+0x2d0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d014      	beq.n	80008ac <fsm_auto_run+0x150>
			{
				displayNB_showTime(led_NB--);
 8000882:	4b6b      	ldr	r3, [pc, #428]	; (8000a30 <fsm_auto_run+0x2d4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	4969      	ldr	r1, [pc, #420]	; (8000a30 <fsm_auto_run+0x2d4>)
 800088a:	600a      	str	r2, [r1, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fddd 	bl	800044c <displayNB_showTime>
				displayDT_showTime(led_DT--);
 8000892:	4b68      	ldr	r3, [pc, #416]	; (8000a34 <fsm_auto_run+0x2d8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	4966      	ldr	r1, [pc, #408]	; (8000a34 <fsm_auto_run+0x2d8>)
 800089a:	600a      	str	r2, [r1, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fdf9 	bl	8000494 <displayDT_showTime>
				setTimer(0,1000);
 80008a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ff10 	bl	80006cc <setTimer>
			}
			if(Timer_Flag[1]){
 80008ac:	4b5f      	ldr	r3, [pc, #380]	; (8000a2c <fsm_auto_run+0x2d0>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00a      	beq.n	80008ca <fsm_auto_run+0x16e>
				led_NB=2;
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <fsm_auto_run+0x2d4>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	601a      	str	r2, [r3, #0]
				setTimer(1,2000);
 80008ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff ff04 	bl	80006cc <setTimer>
				status=cd4;
 80008c4:	4b58      	ldr	r3, [pc, #352]	; (8000a28 <fsm_auto_run+0x2cc>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed(0))
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fe2c 	bl	8000528 <isButton1Pressed>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 80f9 	beq.w	8000aca <fsm_auto_run+0x36e>
			{
				status=MODE_2;
 80008d8:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <fsm_auto_run+0x2cc>)
 80008da:	2202      	movs	r2, #2
 80008dc:	601a      	str	r2, [r3, #0]
				display_showMode(MODE_2);
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fdfc 	bl	80004dc <display_showMode>
			}
			break;
 80008e4:	e0f1      	b.n	8000aca <fsm_auto_run+0x36e>
	case cd4:
			yellowred_state();
 80008e6:	f000 fc9b 	bl	8001220 <yellowred_state>
			if(Timer_Flag[0])
 80008ea:	4b50      	ldr	r3, [pc, #320]	; (8000a2c <fsm_auto_run+0x2d0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d014      	beq.n	800091c <fsm_auto_run+0x1c0>
			{
				displayNB_showTime(led_NB--);
 80008f2:	4b4f      	ldr	r3, [pc, #316]	; (8000a30 <fsm_auto_run+0x2d4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	494d      	ldr	r1, [pc, #308]	; (8000a30 <fsm_auto_run+0x2d4>)
 80008fa:	600a      	str	r2, [r1, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fda5 	bl	800044c <displayNB_showTime>
				displayDT_showTime(led_DT--);
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <fsm_auto_run+0x2d8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	494a      	ldr	r1, [pc, #296]	; (8000a34 <fsm_auto_run+0x2d8>)
 800090a:	600a      	str	r2, [r1, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fdc1 	bl	8000494 <displayDT_showTime>
				setTimer(0,1000);
 8000912:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fed8 	bl	80006cc <setTimer>
			}
			if(Timer_Flag[1]){
 800091c:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <fsm_auto_run+0x2d0>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d011      	beq.n	8000948 <fsm_auto_run+0x1ec>
				led_NB=5;
 8000924:	4b42      	ldr	r3, [pc, #264]	; (8000a30 <fsm_auto_run+0x2d4>)
 8000926:	2205      	movs	r2, #5
 8000928:	601a      	str	r2, [r3, #0]
				led_DT=3;
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <fsm_auto_run+0x2d8>)
 800092c:	2203      	movs	r2, #3
 800092e:	601a      	str	r2, [r3, #0]
				setTimer(0,0);
 8000930:	2100      	movs	r1, #0
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff feca 	bl	80006cc <setTimer>
				setTimer(1,3000);
 8000938:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fec5 	bl	80006cc <setTimer>
				status=cd1;
 8000942:	4b39      	ldr	r3, [pc, #228]	; (8000a28 <fsm_auto_run+0x2cc>)
 8000944:	2205      	movs	r2, #5
 8000946:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed(0))
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fded 	bl	8000528 <isButton1Pressed>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 80bc 	beq.w	8000ace <fsm_auto_run+0x372>
			{
				status=MODE_2;
 8000956:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <fsm_auto_run+0x2cc>)
 8000958:	2202      	movs	r2, #2
 800095a:	601a      	str	r2, [r3, #0]
				display_showMode(MODE_2);
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fdbd 	bl	80004dc <display_showMode>
			}
			break;
 8000962:	e0b4      	b.n	8000ace <fsm_auto_run+0x372>
	case MODE_2:
		run_ledblink();
 8000964:	f000 f8c2 	bl	8000aec <run_ledblink>
		if(isButton1Pressed(1))
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fddd 	bl	8000528 <isButton1Pressed>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d010      	beq.n	8000996 <fsm_auto_run+0x23a>
		{

			t_red++;
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <fsm_auto_run+0x2dc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <fsm_auto_run+0x2dc>)
 800097c:	6013      	str	r3, [r2, #0]
			if(t_red>99)
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <fsm_auto_run+0x2dc>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b63      	cmp	r3, #99	; 0x63
 8000984:	dd02      	ble.n	800098c <fsm_auto_run+0x230>
			{
				t_red=0;
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <fsm_auto_run+0x2dc>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
			}
			displayNB_showTime(t_red);
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <fsm_auto_run+0x2dc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fd5b 	bl	800044c <displayNB_showTime>
		}
		if(isButton1Pressed(0))
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdc6 	bl	8000528 <isButton1Pressed>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <fsm_auto_run+0x252>
		{
			status=MODE_3;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <fsm_auto_run+0x2cc>)
 80009a4:	2203      	movs	r2, #3
 80009a6:	601a      	str	r2, [r3, #0]
			display_showMode(MODE_3);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff fd97 	bl	80004dc <display_showMode>
		}
		if(isButton1Pressed(2))
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff fdba 	bl	8000528 <isButton1Pressed>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 808b 	beq.w	8000ad2 <fsm_auto_run+0x376>
		{
			a=t_red;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <fsm_auto_run+0x2dc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <fsm_auto_run+0x2e0>)
 80009c2:	6013      	str	r3, [r2, #0]
		}
		break;
 80009c4:	e085      	b.n	8000ad2 <fsm_auto_run+0x376>

	case MODE_3:
		run_ledblink();
 80009c6:	f000 f891 	bl	8000aec <run_ledblink>
		if(isButton1Pressed(1))
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fdac 	bl	8000528 <isButton1Pressed>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d010      	beq.n	80009f8 <fsm_auto_run+0x29c>

		{
			t_yellow++;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <fsm_auto_run+0x2e4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <fsm_auto_run+0x2e4>)
 80009de:	6013      	str	r3, [r2, #0]
			if(t_yellow>99)
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <fsm_auto_run+0x2e4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b63      	cmp	r3, #99	; 0x63
 80009e6:	dd02      	ble.n	80009ee <fsm_auto_run+0x292>
			{
				t_yellow=0;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <fsm_auto_run+0x2e4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
			}

			displayNB_showTime(t_yellow);
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <fsm_auto_run+0x2e4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd2a 	bl	800044c <displayNB_showTime>
		}
		if(isButton1Pressed(0))
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fd95 	bl	8000528 <isButton1Pressed>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <fsm_auto_run+0x2b4>
		{
			status=MODE_4;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <fsm_auto_run+0x2cc>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	601a      	str	r2, [r3, #0]
			display_showMode(MODE_4);
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f7ff fd66 	bl	80004dc <display_showMode>
		}
		if(isButton1Pressed(2))
 8000a10:	2002      	movs	r0, #2
 8000a12:	f7ff fd89 	bl	8000528 <isButton1Pressed>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d05c      	beq.n	8000ad6 <fsm_auto_run+0x37a>
		{
			b=t_yellow;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <fsm_auto_run+0x2e4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <fsm_auto_run+0x2e8>)
 8000a22:	6013      	str	r3, [r2, #0]


		}
		break;
 8000a24:	e057      	b.n	8000ad6 <fsm_auto_run+0x37a>
 8000a26:	bf00      	nop
 8000a28:	20000044 	.word	0x20000044
 8000a2c:	20000084 	.word	0x20000084
 8000a30:	20000050 	.word	0x20000050
 8000a34:	2000004c 	.word	0x2000004c
 8000a38:	200000dc 	.word	0x200000dc
 8000a3c:	200000e8 	.word	0x200000e8
 8000a40:	200000d8 	.word	0x200000d8
 8000a44:	200000d4 	.word	0x200000d4
	case MODE_4:
		run_ledblink();
 8000a48:	f000 f850 	bl	8000aec <run_ledblink>
		if(isButton1Pressed(1))
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fd6b 	bl	8000528 <isButton1Pressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d010      	beq.n	8000a7a <fsm_auto_run+0x31e>
		{
			t_green++;
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <fsm_auto_run+0x384>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <fsm_auto_run+0x384>)
 8000a60:	6013      	str	r3, [r2, #0]
			if(t_green>99)
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <fsm_auto_run+0x384>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b63      	cmp	r3, #99	; 0x63
 8000a68:	dd02      	ble.n	8000a70 <fsm_auto_run+0x314>
			{
				t_green=0;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <fsm_auto_run+0x384>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
			}

			displayNB_showTime(t_green);
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <fsm_auto_run+0x384>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fce9 	bl	800044c <displayNB_showTime>
		}
		if(isButton1Pressed(0))
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fd54 	bl	8000528 <isButton1Pressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d010      	beq.n	8000aa8 <fsm_auto_run+0x34c>
		{

			status=mode1;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <fsm_auto_run+0x388>)
 8000a88:	2209      	movs	r2, #9
 8000a8a:	601a      	str	r2, [r3, #0]
			setTimer(4,0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2004      	movs	r0, #4
 8000a90:	f7ff fe1c 	bl	80006cc <setTimer>
			setTimer(5,c*1000);
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a9c:	fb02 f303 	mul.w	r3, r2, r3
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f7ff fe12 	bl	80006cc <setTimer>

		}
		if(isButton1Pressed(2))
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f7ff fd3d 	bl	8000528 <isButton1Pressed>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d012      	beq.n	8000ada <fsm_auto_run+0x37e>
		{
			c = t_green;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <fsm_auto_run+0x384>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <fsm_auto_run+0x38c>)
 8000aba:	6013      	str	r3, [r2, #0]
		}
		break;
 8000abc:	e00d      	b.n	8000ada <fsm_auto_run+0x37e>
	default:
		break;
 8000abe:	bf00      	nop
 8000ac0:	e00c      	b.n	8000adc <fsm_auto_run+0x380>
			break;
 8000ac2:	bf00      	nop
 8000ac4:	e00a      	b.n	8000adc <fsm_auto_run+0x380>
			break;
 8000ac6:	bf00      	nop
 8000ac8:	e008      	b.n	8000adc <fsm_auto_run+0x380>
			break;
 8000aca:	bf00      	nop
 8000acc:	e006      	b.n	8000adc <fsm_auto_run+0x380>
			break;
 8000ace:	bf00      	nop
 8000ad0:	e004      	b.n	8000adc <fsm_auto_run+0x380>
		break;
 8000ad2:	bf00      	nop
 8000ad4:	e002      	b.n	8000adc <fsm_auto_run+0x380>
		break;
 8000ad6:	bf00      	nop
 8000ad8:	e000      	b.n	8000adc <fsm_auto_run+0x380>
		break;
 8000ada:	bf00      	nop
	}
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200000e4 	.word	0x200000e4
 8000ae4:	20000044 	.word	0x20000044
 8000ae8:	200000e0 	.word	0x200000e0

08000aec <run_ledblink>:

void run_ledblink(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
if(Timer_Flag[2])
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <run_ledblink+0x4c>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d01c      	beq.n	8000b32 <run_ledblink+0x46>
	{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000af8:	2101      	movs	r1, #1
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <run_ledblink+0x50>)
 8000afc:	f000 fef3 	bl	80018e6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000b00:	2108      	movs	r1, #8
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <run_ledblink+0x50>)
 8000b04:	f000 feef 	bl	80018e6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000b08:	2102      	movs	r1, #2
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <run_ledblink+0x50>)
 8000b0c:	f000 feeb 	bl	80018e6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000b10:	2110      	movs	r1, #16
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <run_ledblink+0x50>)
 8000b14:	f000 fee7 	bl	80018e6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <run_ledblink+0x50>)
 8000b1c:	f000 fee3 	bl	80018e6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <run_ledblink+0x50>)
 8000b24:	f000 fedf 	bl	80018e6 <HAL_GPIO_TogglePin>
			setTimer(2,500);
 8000b28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff fdcd 	bl	80006cc <setTimer>
	}
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000084 	.word	0x20000084
 8000b3c:	40010800 	.word	0x40010800

08000b40 <fsm_set>:
 *  Created on: Nov 2, 2024
 *      Author: Admin
 */
#include "fsm_setting.h"
void fsm_set()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	switch(status)
 8000b44:	4b8b      	ldr	r3, [pc, #556]	; (8000d74 <fsm_set+0x234>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b09      	subs	r3, #9
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	f200 8106 	bhi.w	8000d5c <fsm_set+0x21c>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <fsm_set+0x18>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b69 	.word	0x08000b69
 8000b5c:	08000bdd 	.word	0x08000bdd
 8000b60:	08000c61 	.word	0x08000c61
 8000b64:	08000cdb 	.word	0x08000cdb
	{
	case mode1:
	        redgreen_state();
 8000b68:	f000 faee 	bl	8001148 <redgreen_state>
	    if(Timer_Flag[4]){
 8000b6c:	4b82      	ldr	r3, [pc, #520]	; (8000d78 <fsm_set+0x238>)
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d014      	beq.n	8000b9e <fsm_set+0x5e>
	        displayNB_showTime(a--);
 8000b74:	4b81      	ldr	r3, [pc, #516]	; (8000d7c <fsm_set+0x23c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1e5a      	subs	r2, r3, #1
 8000b7a:	4980      	ldr	r1, [pc, #512]	; (8000d7c <fsm_set+0x23c>)
 8000b7c:	600a      	str	r2, [r1, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fc64 	bl	800044c <displayNB_showTime>
	        displayDT_showTime(c--);
 8000b84:	4b7e      	ldr	r3, [pc, #504]	; (8000d80 <fsm_set+0x240>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	1e5a      	subs	r2, r3, #1
 8000b8a:	497d      	ldr	r1, [pc, #500]	; (8000d80 <fsm_set+0x240>)
 8000b8c:	600a      	str	r2, [r1, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fc80 	bl	8000494 <displayDT_showTime>
	        setTimer(4, 1000);
 8000b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b98:	2004      	movs	r0, #4
 8000b9a:	f7ff fd97 	bl	80006cc <setTimer>
	    }
	    if(Timer_Flag[5]){
 8000b9e:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <fsm_set+0x238>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00c      	beq.n	8000bc0 <fsm_set+0x80>
	        setTimer(5,b*1000);
 8000ba6:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <fsm_set+0x244>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2005      	movs	r0, #5
 8000bb6:	f7ff fd89 	bl	80006cc <setTimer>
	        status = mode2;
 8000bba:	4b6e      	ldr	r3, [pc, #440]	; (8000d74 <fsm_set+0x234>)
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	601a      	str	r2, [r3, #0]
	    }
	    if (isButton1Pressed(0)) {
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fcb1 	bl	8000528 <isButton1Pressed>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 80c9 	beq.w	8000d60 <fsm_set+0x220>
	        status = MODE_2;
 8000bce:	4b69      	ldr	r3, [pc, #420]	; (8000d74 <fsm_set+0x234>)
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	601a      	str	r2, [r3, #0]
	        display_showMode(MODE_2);
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f7ff fc81 	bl	80004dc <display_showMode>
	    }
	    break;
 8000bda:	e0c1      	b.n	8000d60 <fsm_set+0x220>

	case mode2:
	    redyellow_state();
 8000bdc:	f000 fad8 	bl	8001190 <redyellow_state>
	    if(Timer_Flag[4]){
 8000be0:	4b65      	ldr	r3, [pc, #404]	; (8000d78 <fsm_set+0x238>)
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d014      	beq.n	8000c12 <fsm_set+0xd2>
	        displayNB_showTime(a--);
 8000be8:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <fsm_set+0x23c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	1e5a      	subs	r2, r3, #1
 8000bee:	4963      	ldr	r1, [pc, #396]	; (8000d7c <fsm_set+0x23c>)
 8000bf0:	600a      	str	r2, [r1, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc2a 	bl	800044c <displayNB_showTime>
	        displayDT_showTime(b--);
 8000bf8:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <fsm_set+0x244>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	4961      	ldr	r1, [pc, #388]	; (8000d84 <fsm_set+0x244>)
 8000c00:	600a      	str	r2, [r1, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc46 	bl	8000494 <displayDT_showTime>
	        setTimer(4,1000);
 8000c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f7ff fd5d 	bl	80006cc <setTimer>
	    }
	    if(Timer_Flag[5]){
 8000c12:	4b59      	ldr	r3, [pc, #356]	; (8000d78 <fsm_set+0x238>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d014      	beq.n	8000c44 <fsm_set+0x104>
	    	a=t_green;
 8000c1a:	4b5b      	ldr	r3, [pc, #364]	; (8000d88 <fsm_set+0x248>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a57      	ldr	r2, [pc, #348]	; (8000d7c <fsm_set+0x23c>)
 8000c20:	6013      	str	r3, [r2, #0]
	    	c=t_red;
 8000c22:	4b5a      	ldr	r3, [pc, #360]	; (8000d8c <fsm_set+0x24c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a56      	ldr	r2, [pc, #344]	; (8000d80 <fsm_set+0x240>)
 8000c28:	6013      	str	r3, [r2, #0]
	    	setTimer(5, a*1000);
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <fsm_set+0x23c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c32:	fb02 f303 	mul.w	r3, r2, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f7ff fd47 	bl	80006cc <setTimer>
	        status = mode3;
 8000c3e:	4b4d      	ldr	r3, [pc, #308]	; (8000d74 <fsm_set+0x234>)
 8000c40:	220b      	movs	r2, #11
 8000c42:	601a      	str	r2, [r3, #0]
	    }
	    if (isButton1Pressed(0)) {
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fc6f 	bl	8000528 <isButton1Pressed>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 8089 	beq.w	8000d64 <fsm_set+0x224>
	        status = MODE_2;
 8000c52:	4b48      	ldr	r3, [pc, #288]	; (8000d74 <fsm_set+0x234>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	601a      	str	r2, [r3, #0]
	        display_showMode(MODE_2);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff fc3f 	bl	80004dc <display_showMode>
	    }
	    break;
 8000c5e:	e081      	b.n	8000d64 <fsm_set+0x224>

	case mode3:
	    greenred_state();
 8000c60:	f000 faba 	bl	80011d8 <greenred_state>
	    if (Timer_Flag[4]) {
 8000c64:	4b44      	ldr	r3, [pc, #272]	; (8000d78 <fsm_set+0x238>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d014      	beq.n	8000c96 <fsm_set+0x156>
	        displayNB_showTime(a--);
 8000c6c:	4b43      	ldr	r3, [pc, #268]	; (8000d7c <fsm_set+0x23c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	4942      	ldr	r1, [pc, #264]	; (8000d7c <fsm_set+0x23c>)
 8000c74:	600a      	str	r2, [r1, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fbe8 	bl	800044c <displayNB_showTime>
	        displayDT_showTime(c--);
 8000c7c:	4b40      	ldr	r3, [pc, #256]	; (8000d80 <fsm_set+0x240>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	493f      	ldr	r1, [pc, #252]	; (8000d80 <fsm_set+0x240>)
 8000c84:	600a      	str	r2, [r1, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc04 	bl	8000494 <displayDT_showTime>
	        setTimer(4, 1000);
 8000c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c90:	2004      	movs	r0, #4
 8000c92:	f7ff fd1b 	bl	80006cc <setTimer>
	    }
	    if(Timer_Flag[5]){
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <fsm_set+0x238>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d010      	beq.n	8000cc0 <fsm_set+0x180>
	    	b=t_yellow;
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <fsm_set+0x250>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <fsm_set+0x244>)
 8000ca4:	6013      	str	r3, [r2, #0]
	    	setTimer(5,b*1000);
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <fsm_set+0x244>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	2005      	movs	r0, #5
 8000cb6:	f7ff fd09 	bl	80006cc <setTimer>
	        status = mode4;
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <fsm_set+0x234>)
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	601a      	str	r2, [r3, #0]
	    }
	    if (isButton1Pressed(0)) {
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff fc31 	bl	8000528 <isButton1Pressed>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d04d      	beq.n	8000d68 <fsm_set+0x228>
	        status = MODE_2;
 8000ccc:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <fsm_set+0x234>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	601a      	str	r2, [r3, #0]
	        display_showMode(MODE_2);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f7ff fc02 	bl	80004dc <display_showMode>
	    }
	    break;
 8000cd8:	e046      	b.n	8000d68 <fsm_set+0x228>

	case mode4:
	    yellowred_state();
 8000cda:	f000 faa1 	bl	8001220 <yellowred_state>
	    if (Timer_Flag[4]){
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <fsm_set+0x238>)
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d014      	beq.n	8000d10 <fsm_set+0x1d0>
	        displayNB_showTime(b--);
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <fsm_set+0x244>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	4925      	ldr	r1, [pc, #148]	; (8000d84 <fsm_set+0x244>)
 8000cee:	600a      	str	r2, [r1, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fbab 	bl	800044c <displayNB_showTime>
	        displayDT_showTime(c--);
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <fsm_set+0x240>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1e5a      	subs	r2, r3, #1
 8000cfc:	4920      	ldr	r1, [pc, #128]	; (8000d80 <fsm_set+0x240>)
 8000cfe:	600a      	str	r2, [r1, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fbc7 	bl	8000494 <displayDT_showTime>
	        setTimer(4, 1000);
 8000d06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f7ff fcde 	bl	80006cc <setTimer>
	    }
	    if(Timer_Flag[5]){
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <fsm_set+0x238>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d014      	beq.n	8000d42 <fsm_set+0x202>
	    	a=t_red;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <fsm_set+0x24c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <fsm_set+0x23c>)
 8000d1e:	6013      	str	r3, [r2, #0]
	    	c=t_green;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <fsm_set+0x248>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <fsm_set+0x240>)
 8000d26:	6013      	str	r3, [r2, #0]
	        setTimer(5, a*1000);
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <fsm_set+0x23c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d30:	fb02 f303 	mul.w	r3, r2, r3
 8000d34:	4619      	mov	r1, r3
 8000d36:	2005      	movs	r0, #5
 8000d38:	f7ff fcc8 	bl	80006cc <setTimer>
	        status = mode1;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <fsm_set+0x234>)
 8000d3e:	2209      	movs	r2, #9
 8000d40:	601a      	str	r2, [r3, #0]
	    }
	    if (isButton1Pressed(0)) {
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fbf0 	bl	8000528 <isButton1Pressed>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00e      	beq.n	8000d6c <fsm_set+0x22c>
	        status = MODE_2;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <fsm_set+0x234>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	601a      	str	r2, [r3, #0]
	        display_showMode(MODE_2);
 8000d54:	2002      	movs	r0, #2
 8000d56:	f7ff fbc1 	bl	80004dc <display_showMode>
	    }
	    break;
 8000d5a:	e007      	b.n	8000d6c <fsm_set+0x22c>

	default:
	    break;
 8000d5c:	bf00      	nop
 8000d5e:	e006      	b.n	8000d6e <fsm_set+0x22e>
	    break;
 8000d60:	bf00      	nop
 8000d62:	e004      	b.n	8000d6e <fsm_set+0x22e>
	    break;
 8000d64:	bf00      	nop
 8000d66:	e002      	b.n	8000d6e <fsm_set+0x22e>
	    break;
 8000d68:	bf00      	nop
 8000d6a:	e000      	b.n	8000d6e <fsm_set+0x22e>
	    break;
 8000d6c:	bf00      	nop
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000044 	.word	0x20000044
 8000d78:	20000084 	.word	0x20000084
 8000d7c:	200000e8 	.word	0x200000e8
 8000d80:	200000e0 	.word	0x200000e0
 8000d84:	200000d4 	.word	0x200000d4
 8000d88:	200000e4 	.word	0x200000e4
 8000d8c:	200000dc 	.word	0x200000dc
 8000d90:	200000d8 	.word	0x200000d8

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f000 fa8c 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f83a 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 f8c0 	bl	8000f24 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000da4:	f000 f872 	bl	8000e8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000da8:	4814      	ldr	r0, [pc, #80]	; (8000dfc <main+0x68>)
 8000daa:	f001 f9e1 	bl	8002170 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  led_NB=5;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <main+0x6c>)
 8000db0:	2205      	movs	r2, #5
 8000db2:	601a      	str	r2, [r3, #0]
  led_DT=3;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <main+0x70>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	601a      	str	r2, [r3, #0]
  setTimer(0,0);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff fc85 	bl	80006cc <setTimer>
  setTimer(1,3000);
 8000dc2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f7ff fc80 	bl	80006cc <setTimer>
  status=cd1;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <main+0x74>)
 8000dce:	2205      	movs	r2, #5
 8000dd0:	601a      	str	r2, [r3, #0]
  setTimer(3,100);
 8000dd2:	2164      	movs	r1, #100	; 0x64
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f7ff fc79 	bl	80006cc <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  if(Timer_Flag[3])
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <main+0x78>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <main+0x5e>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000de2:	2120      	movs	r1, #32
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <main+0x7c>)
 8000de6:	f000 fd7e 	bl	80018e6 <HAL_GPIO_TogglePin>
		  setTimer(3,100);
 8000dea:	2164      	movs	r1, #100	; 0x64
 8000dec:	2003      	movs	r0, #3
 8000dee:	f7ff fc6d 	bl	80006cc <setTimer>
	  }
	  fsm_auto_run();
 8000df2:	f7ff fcb3 	bl	800075c <fsm_auto_run>
	  fsm_set();
 8000df6:	f7ff fea3 	bl	8000b40 <fsm_set>
  {
 8000dfa:	e7ee      	b.n	8000dda <main+0x46>
 8000dfc:	200000ec 	.word	0x200000ec
 8000e00:	20000050 	.word	0x20000050
 8000e04:	2000004c 	.word	0x2000004c
 8000e08:	20000044 	.word	0x20000044
 8000e0c:	20000084 	.word	0x20000084
 8000e10:	40010800 	.word	0x40010800

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b090      	sub	sp, #64	; 0x40
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0318 	add.w	r3, r7, #24
 8000e1e:	2228      	movs	r2, #40	; 0x28
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fd54 	bl	80028d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fd64 	bl	8001918 <HAL_RCC_OscConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e56:	f000 f8e3 	bl	8001020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 ffd0 	bl	8001e18 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 f8cf 	bl	8001020 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3740      	adds	r7, #64	; 0x40
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eb2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ec0:	2209      	movs	r2, #9
 8000ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ed2:	f001 f8fd 	bl	80020d0 <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000edc:	f000 f8a0 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4619      	mov	r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eee:	f001 fa7b 	bl	80023e8 <HAL_TIM_ConfigClockSource>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ef8:	f000 f892 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000f0a:	f001 fc53 	bl	80027b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f14:	f000 f884 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200000ec 	.word	0x200000ec

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a2e      	ldr	r2, [pc, #184]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_GPIO_Init+0xd4>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f80:	2200      	movs	r2, #0
 8000f82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f86:	481d      	ldr	r0, [pc, #116]	; (8000ffc <MX_GPIO_Init+0xd8>)
 8000f88:	f000 fc95 	bl	80018b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f92:	481b      	ldr	r0, [pc, #108]	; (8001000 <MX_GPIO_Init+0xdc>)
 8000f94:	f000 fc8f 	bl	80018b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000f98:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_GPIO_Init+0xe0>)
 8000fae:	f000 faf1 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_GPIO_Init+0xd8>)
 8000fcc:	f000 fae2 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_GPIO_Init+0xdc>)
 8000fea:	f000 fad3 	bl	8001594 <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40011000 	.word	0x40011000

08001008 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	runTimer();
 8001010:	f7ff fb7a 	bl	8000708 <runTimer>
	getKeyInput();
 8001014:	f7ff fab2 	bl	800057c <getKeyInput>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_MspInit+0x5c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_MspInit+0x5c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_MspInit+0x60>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_MspInit+0x60>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a0:	d113      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	201c      	movs	r0, #28
 80010c0:	f000 fa31 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010c4:	201c      	movs	r0, #28
 80010c6:	f000 fa4a 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f90f 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM2_IRQHandler+0x10>)
 800112e:	f001 f86b 	bl	8002208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000ec 	.word	0x200000ec

0800113c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <redgreen_state>:
 */
#include "trafficlight.h"
// 0(Đ)-1(V)-2(X) NB
// 3(Đ)-4(V)-6(X) ĐT

void redgreen_state(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2101      	movs	r1, #1
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <redgreen_state+0x44>)
 8001152:	f000 fbb0 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2102      	movs	r1, #2
 800115a:	480c      	ldr	r0, [pc, #48]	; (800118c <redgreen_state+0x44>)
 800115c:	f000 fbab 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2104      	movs	r1, #4
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <redgreen_state+0x44>)
 8001166:	f000 fba6 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2108      	movs	r1, #8
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <redgreen_state+0x44>)
 8001170:	f000 fba1 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2110      	movs	r1, #16
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <redgreen_state+0x44>)
 800117a:	f000 fb9c 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2140      	movs	r1, #64	; 0x40
 8001182:	4802      	ldr	r0, [pc, #8]	; (800118c <redgreen_state+0x44>)
 8001184:	f000 fb97 	bl	80018b6 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40010800 	.word	0x40010800

08001190 <redyellow_state>:
void redyellow_state(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2101      	movs	r1, #1
 8001198:	480e      	ldr	r0, [pc, #56]	; (80011d4 <redyellow_state+0x44>)
 800119a:	f000 fb8c 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2102      	movs	r1, #2
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <redyellow_state+0x44>)
 80011a4:	f000 fb87 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2104      	movs	r1, #4
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <redyellow_state+0x44>)
 80011ae:	f000 fb82 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2108      	movs	r1, #8
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <redyellow_state+0x44>)
 80011b8:	f000 fb7d 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2110      	movs	r1, #16
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <redyellow_state+0x44>)
 80011c2:	f000 fb78 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2140      	movs	r1, #64	; 0x40
 80011ca:	4802      	ldr	r0, [pc, #8]	; (80011d4 <redyellow_state+0x44>)
 80011cc:	f000 fb73 	bl	80018b6 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40010800 	.word	0x40010800

080011d8 <greenred_state>:
void greenred_state(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2101      	movs	r1, #1
 80011e0:	480e      	ldr	r0, [pc, #56]	; (800121c <greenred_state+0x44>)
 80011e2:	f000 fb68 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2102      	movs	r1, #2
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <greenred_state+0x44>)
 80011ec:	f000 fb63 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2104      	movs	r1, #4
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <greenred_state+0x44>)
 80011f6:	f000 fb5e 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2108      	movs	r1, #8
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <greenred_state+0x44>)
 8001200:	f000 fb59 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2110      	movs	r1, #16
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <greenred_state+0x44>)
 800120a:	f000 fb54 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	4802      	ldr	r0, [pc, #8]	; (800121c <greenred_state+0x44>)
 8001214:	f000 fb4f 	bl	80018b6 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40010800 	.word	0x40010800

08001220 <yellowred_state>:
void yellowred_state(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2101      	movs	r1, #1
 8001228:	480e      	ldr	r0, [pc, #56]	; (8001264 <yellowred_state+0x44>)
 800122a:	f000 fb44 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2102      	movs	r1, #2
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <yellowred_state+0x44>)
 8001234:	f000 fb3f 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2104      	movs	r1, #4
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <yellowred_state+0x44>)
 800123e:	f000 fb3a 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2108      	movs	r1, #8
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <yellowred_state+0x44>)
 8001248:	f000 fb35 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2110      	movs	r1, #16
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <yellowred_state+0x44>)
 8001252:	f000 fb30 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4802      	ldr	r0, [pc, #8]	; (8001264 <yellowred_state+0x44>)
 800125c:	f000 fb2b 	bl	80018b6 <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40010800 	.word	0x40010800

08001268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001268:	f7ff ff68 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800126e:	490c      	ldr	r1, [pc, #48]	; (80012a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001270:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001284:	4c09      	ldr	r4, [pc, #36]	; (80012ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f001 faf9 	bl	8002888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001296:	f7ff fd7d 	bl	8000d94 <main>
  bx lr
 800129a:	4770      	bx	lr
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80012a4:	08002930 	.word	0x08002930
  ldr r2, =_sbss
 80012a8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80012ac:	20000138 	.word	0x20000138

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_Init+0x28>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_Init+0x28>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f923 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff feac 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f93b 	bl	800157a <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f903 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000010 	.word	0x20000010
 8001338:	20000018 	.word	0x20000018
 800133c:	20000014 	.word	0x20000014

08001340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_IncTick+0x1c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_IncTick+0x20>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <HAL_IncTick+0x20>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000018 	.word	0x20000018
 8001360:	20000134 	.word	0x20000134

08001364 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <HAL_GetTick+0x10>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000134 	.word	0x20000134

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4906      	ldr	r1, [pc, #24]	; (8001410 <__NVIC_EnableIRQ+0x34>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff90 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff2d 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff42 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff90 	bl	8001468 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5f 	bl	8001414 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff35 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa2 	bl	80014cc <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b08b      	sub	sp, #44	; 0x2c
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e148      	b.n	800183a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015a8:	2201      	movs	r2, #1
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8137 	bne.w	8001834 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4aa3      	ldr	r2, [pc, #652]	; (8001858 <HAL_GPIO_Init+0x2c4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d05e      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015d0:	4aa1      	ldr	r2, [pc, #644]	; (8001858 <HAL_GPIO_Init+0x2c4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d875      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015d6:	4aa1      	ldr	r2, [pc, #644]	; (800185c <HAL_GPIO_Init+0x2c8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d058      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015dc:	4a9f      	ldr	r2, [pc, #636]	; (800185c <HAL_GPIO_Init+0x2c8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d86f      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015e2:	4a9f      	ldr	r2, [pc, #636]	; (8001860 <HAL_GPIO_Init+0x2cc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d052      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015e8:	4a9d      	ldr	r2, [pc, #628]	; (8001860 <HAL_GPIO_Init+0x2cc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d869      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015ee:	4a9d      	ldr	r2, [pc, #628]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d04c      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015f4:	4a9b      	ldr	r2, [pc, #620]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d863      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015fa:	4a9b      	ldr	r2, [pc, #620]	; (8001868 <HAL_GPIO_Init+0x2d4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d046      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 8001600:	4a99      	ldr	r2, [pc, #612]	; (8001868 <HAL_GPIO_Init+0x2d4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d85d      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 8001606:	2b12      	cmp	r3, #18
 8001608:	d82a      	bhi.n	8001660 <HAL_GPIO_Init+0xcc>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d859      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <HAL_GPIO_Init+0x80>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	0800168f 	.word	0x0800168f
 8001618:	08001669 	.word	0x08001669
 800161c:	0800167b 	.word	0x0800167b
 8001620:	080016bd 	.word	0x080016bd
 8001624:	080016c3 	.word	0x080016c3
 8001628:	080016c3 	.word	0x080016c3
 800162c:	080016c3 	.word	0x080016c3
 8001630:	080016c3 	.word	0x080016c3
 8001634:	080016c3 	.word	0x080016c3
 8001638:	080016c3 	.word	0x080016c3
 800163c:	080016c3 	.word	0x080016c3
 8001640:	080016c3 	.word	0x080016c3
 8001644:	080016c3 	.word	0x080016c3
 8001648:	080016c3 	.word	0x080016c3
 800164c:	080016c3 	.word	0x080016c3
 8001650:	080016c3 	.word	0x080016c3
 8001654:	080016c3 	.word	0x080016c3
 8001658:	08001671 	.word	0x08001671
 800165c:	08001685 	.word	0x08001685
 8001660:	4a82      	ldr	r2, [pc, #520]	; (800186c <HAL_GPIO_Init+0x2d8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001666:	e02c      	b.n	80016c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e029      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	3304      	adds	r3, #4
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e024      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	3308      	adds	r3, #8
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e01f      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	330c      	adds	r3, #12
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e01a      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001696:	2304      	movs	r3, #4
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e013      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a4:	2308      	movs	r3, #8
 80016a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	611a      	str	r2, [r3, #16]
          break;
 80016ae:	e009      	b.n	80016c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b0:	2308      	movs	r3, #8
 80016b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	615a      	str	r2, [r3, #20]
          break;
 80016ba:	e003      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e000      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          break;
 80016c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	; 0xff
 80016c8:	d801      	bhi.n	80016ce <HAL_GPIO_Init+0x13a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_Init+0x13e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	; 0xff
 80016d8:	d802      	bhi.n	80016e0 <HAL_GPIO_Init+0x14c>
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x152>
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	3b08      	subs	r3, #8
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	210f      	movs	r1, #15
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	6a39      	ldr	r1, [r7, #32]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8090 	beq.w	8001834 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001714:	4b56      	ldr	r3, [pc, #344]	; (8001870 <HAL_GPIO_Init+0x2dc>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a55      	ldr	r2, [pc, #340]	; (8001870 <HAL_GPIO_Init+0x2dc>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b53      	ldr	r3, [pc, #332]	; (8001870 <HAL_GPIO_Init+0x2dc>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800172c:	4a51      	ldr	r2, [pc, #324]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a49      	ldr	r2, [pc, #292]	; (8001878 <HAL_GPIO_Init+0x2e4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00d      	beq.n	8001774 <HAL_GPIO_Init+0x1e0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_GPIO_Init+0x2e8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x1dc>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a47      	ldr	r2, [pc, #284]	; (8001880 <HAL_GPIO_Init+0x2ec>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_GPIO_Init+0x1d8>
 8001768:	2302      	movs	r3, #2
 800176a:	e004      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 800176c:	2303      	movs	r3, #3
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001774:	2300      	movs	r3, #0
 8001776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001778:	f002 0203 	and.w	r2, r2, #3
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	4093      	lsls	r3, r2
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001786:	493b      	ldr	r1, [pc, #236]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4937      	ldr	r1, [pc, #220]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4933      	ldr	r1, [pc, #204]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017c8:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	492d      	ldr	r1, [pc, #180]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	43db      	mvns	r3, r3
 80017de:	4929      	ldr	r1, [pc, #164]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4923      	ldr	r1, [pc, #140]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	491f      	ldr	r1, [pc, #124]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 8001808:	4013      	ands	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4919      	ldr	r1, [pc, #100]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	43db      	mvns	r3, r3
 800182e:	4915      	ldr	r1, [pc, #84]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 8001830:	4013      	ands	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	3301      	adds	r3, #1
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f aeaf 	bne.w	80015a8 <HAL_GPIO_Init+0x14>
  }
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	372c      	adds	r7, #44	; 0x2c
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	10320000 	.word	0x10320000
 800185c:	10310000 	.word	0x10310000
 8001860:	10220000 	.word	0x10220000
 8001864:	10210000 	.word	0x10210000
 8001868:	10120000 	.word	0x10120000
 800186c:	10110000 	.word	0x10110000
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000
 8001878:	40010800 	.word	0x40010800
 800187c:	40010c00 	.word	0x40010c00
 8001880:	40011000 	.word	0x40011000
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e001      	b.n	80018aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c6:	787b      	ldrb	r3, [r7, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	041a      	lsls	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	611a      	str	r2, [r3, #16]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018f8:	887a      	ldrh	r2, [r7, #2]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	041a      	lsls	r2, r3, #16
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43d9      	mvns	r1, r3
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	400b      	ands	r3, r1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e26c      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8087 	beq.w	8001a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001938:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b04      	cmp	r3, #4
 8001942:	d00c      	beq.n	800195e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001944:	4b8f      	ldr	r3, [pc, #572]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d112      	bne.n	8001976 <HAL_RCC_OscConfig+0x5e>
 8001950:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d10b      	bne.n	8001976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195e:	4b89      	ldr	r3, [pc, #548]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d06c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x12c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d168      	bne.n	8001a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e246      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x76>
 8001980:	4b80      	ldr	r3, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a7f      	ldr	r2, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e02e      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x98>
 8001996:	4b7b      	ldr	r3, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7a      	ldr	r2, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b78      	ldr	r3, [pc, #480]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a77      	ldr	r2, [pc, #476]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e01d      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0xbc>
 80019ba:	4b72      	ldr	r3, [pc, #456]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a71      	ldr	r2, [pc, #452]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019d4:	4b6b      	ldr	r3, [pc, #428]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a6a      	ldr	r2, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a67      	ldr	r2, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fcb6 	bl	8001364 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fcb2 	bl	8001364 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1fa      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0xe4>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fca2 	bl	8001364 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fc9e 	bl	8001364 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1e6      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x10c>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d063      	beq.n	8001b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a52:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5e:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d11c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x18c>
 8001a6a:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d116      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x176>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e1ba      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4939      	ldr	r1, [pc, #228]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e03a      	b.n	8001b1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_RCC_OscConfig+0x270>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fc57 	bl	8001364 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff fc53 	bl	8001364 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e19b      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4927      	ldr	r1, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_RCC_OscConfig+0x270>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc36 	bl	8001364 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff fc32 	bl	8001364 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e17a      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03a      	beq.n	8001b9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d019      	beq.n	8001b62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff fc16 	bl	8001364 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fc12 	bl	8001364 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e15a      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f000 fa9a 	bl	8002094 <RCC_Delay>
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7ff fbfc 	bl	8001364 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	e00f      	b.n	8001b90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff fbf8 	bl	8001364 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d908      	bls.n	8001b90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e140      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	42420000 	.word	0x42420000
 8001b8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b9e      	ldr	r3, [pc, #632]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1e9      	bne.n	8001b70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a6 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b97      	ldr	r3, [pc, #604]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b94      	ldr	r3, [pc, #592]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a93      	ldr	r2, [pc, #588]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b8e      	ldr	r3, [pc, #568]	; (8001e10 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be2:	4b8b      	ldr	r3, [pc, #556]	; (8001e10 <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a8a      	ldr	r2, [pc, #552]	; (8001e10 <HAL_RCC_OscConfig+0x4f8>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fbb9 	bl	8001364 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7ff fbb5 	bl	8001364 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0fd      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b81      	ldr	r3, [pc, #516]	; (8001e10 <HAL_RCC_OscConfig+0x4f8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x312>
 8001c1c:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a7a      	ldr	r2, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	e02d      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x334>
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a72      	ldr	r2, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6213      	str	r3, [r2, #32]
 8001c4a:	e01c      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x356>
 8001c54:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a69      	ldr	r2, [pc, #420]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a66      	ldr	r2, [pc, #408]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	4b64      	ldr	r3, [pc, #400]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a63      	ldr	r2, [pc, #396]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fb69 	bl	8001364 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff fb65 	bl	8001364 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0ab      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ee      	beq.n	8001c96 <HAL_RCC_OscConfig+0x37e>
 8001cb8:	e014      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7ff fb53 	bl	8001364 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7ff fb4f 	bl	8001364 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e095      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b48      	ldr	r3, [pc, #288]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a47      	ldr	r2, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8081 	beq.w	8001e02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d061      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d146      	bne.n	8001da2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <HAL_RCC_OscConfig+0x4fc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fb23 	bl	8001364 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff fb1f 	bl	8001364 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e067      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	492d      	ldr	r1, [pc, #180]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a19      	ldr	r1, [r3, #32]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	4927      	ldr	r1, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x4fc>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff faf3 	bl	8001364 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7ff faef 	bl	8001364 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e037      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x46a>
 8001da0:	e02f      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <HAL_RCC_OscConfig+0x4fc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fadc 	bl	8001364 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff fad8 	bl	8001364 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e020      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x498>
 8001dce:	e018      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e013      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40007000 	.word	0x40007000
 8001e14:	42420060 	.word	0x42420060

08001e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0d0      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4965      	ldr	r1, [pc, #404]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0b8      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	494d      	ldr	r1, [pc, #308]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d040      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d115      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07f      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e073      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06b      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef6:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 0203 	bic.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4936      	ldr	r1, [pc, #216]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f08:	f7ff fa2c 	bl	8001364 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7ff fa28 	bl	8001364 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e053      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 020c 	and.w	r2, r3, #12
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1eb      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d210      	bcs.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4922      	ldr	r1, [pc, #136]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e032      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4916      	ldr	r1, [pc, #88]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	490e      	ldr	r1, [pc, #56]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa6:	f000 f821 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001faa:	4602      	mov	r2, r0
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	490a      	ldr	r1, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	5ccb      	ldrb	r3, [r1, r3]
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f98a 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08002904 	.word	0x08002904
 8001fe4:	20000010 	.word	0x20000010
 8001fe8:	20000014 	.word	0x20000014

08001fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_GetSysClockFreq+0x94>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b04      	cmp	r3, #4
 8002014:	d002      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x30>
 8002016:	2b08      	cmp	r3, #8
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x36>
 800201a:	e027      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800201e:	613b      	str	r3, [r7, #16]
      break;
 8002020:	e027      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_RCC_GetSysClockFreq+0x9c>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d010      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_RCC_GetSysClockFreq+0x94>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0c5b      	lsrs	r3, r3, #17
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800204e:	fb02 f203 	mul.w	r2, r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e004      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	613b      	str	r3, [r7, #16]
      break;
 800206a:	e002      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800206e:	613b      	str	r3, [r7, #16]
      break;
 8002070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002072:	693b      	ldr	r3, [r7, #16]
}
 8002074:	4618      	mov	r0, r3
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	08002914 	.word	0x08002914
 800208c:	08002924 	.word	0x08002924
 8002090:	003d0900 	.word	0x003d0900

08002094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <RCC_Delay+0x34>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <RCC_Delay+0x38>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0a5b      	lsrs	r3, r3, #9
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020b0:	bf00      	nop
  }
  while (Delay --);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	60fa      	str	r2, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f9      	bne.n	80020b0 <RCC_Delay+0x1c>
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	20000010 	.word	0x20000010
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e041      	b.n	8002166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe ffca 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f000 fa56 	bl	80025c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d001      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e035      	b.n	80021f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_TIM_Base_Start_IT+0x90>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d009      	beq.n	80021be <HAL_TIM_Base_Start_IT+0x4e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b2:	d004      	beq.n	80021be <HAL_TIM_Base_Start_IT+0x4e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a12      	ldr	r2, [pc, #72]	; (8002204 <HAL_TIM_Base_Start_IT+0x94>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d111      	bne.n	80021e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d010      	beq.n	80021f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e0:	e007      	b.n	80021f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40000400 	.word	0x40000400

08002208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d020      	beq.n	800226c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0202 	mvn.w	r2, #2
 800223c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f998 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 8002258:	e005      	b.n	8002266 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f98b 	bl	8002576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f99a 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d020      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0204 	mvn.w	r2, #4
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f972 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f965 	bl	8002576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f974 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d020      	beq.n	8002304 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0208 	mvn.w	r2, #8
 80022d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2204      	movs	r2, #4
 80022da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f94c 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f93f 	bl	8002576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f94e 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d020      	beq.n	8002350 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0210 	mvn.w	r2, #16
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2208      	movs	r2, #8
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f926 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f919 	bl	8002576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f928 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0201 	mvn.w	r2, #1
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fe4a 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa6f 	bl	8002876 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f8f8 	bl	80025ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0220 	mvn.w	r2, #32
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa42 	bl	8002864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_TIM_ConfigClockSource+0x1c>
 8002400:	2302      	movs	r3, #2
 8002402:	e0b4      	b.n	800256e <HAL_TIM_ConfigClockSource+0x186>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800242a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243c:	d03e      	beq.n	80024bc <HAL_TIM_ConfigClockSource+0xd4>
 800243e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002442:	f200 8087 	bhi.w	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244a:	f000 8086 	beq.w	800255a <HAL_TIM_ConfigClockSource+0x172>
 800244e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002452:	d87f      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d01a      	beq.n	800248e <HAL_TIM_ConfigClockSource+0xa6>
 8002458:	2b70      	cmp	r3, #112	; 0x70
 800245a:	d87b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b60      	cmp	r3, #96	; 0x60
 800245e:	d050      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x11a>
 8002460:	2b60      	cmp	r3, #96	; 0x60
 8002462:	d877      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d03c      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002468:	2b50      	cmp	r3, #80	; 0x50
 800246a:	d873      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d058      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x13a>
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d86f      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d064      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x15a>
 8002478:	2b30      	cmp	r3, #48	; 0x30
 800247a:	d86b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d060      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x15a>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d867      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05c      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x15a>
 8002488:	2b10      	cmp	r3, #16
 800248a:	d05a      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x15a>
 800248c:	e062      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f000 f96a 	bl	8002776 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	609a      	str	r2, [r3, #8]
      break;
 80024ba:	e04f      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f000 f953 	bl	8002776 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024de:	609a      	str	r2, [r3, #8]
      break;
 80024e0:	e03c      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f000 f8ca 	bl	8002688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2150      	movs	r1, #80	; 0x50
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f921 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 8002500:	e02c      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f000 f8e8 	bl	80026e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2160      	movs	r1, #96	; 0x60
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f911 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 8002520:	e01c      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f8aa 	bl	8002688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f901 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 8002540:	e00c      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f000 f8f8 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 8002552:	e003      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      break;
 8002558:	e000      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800255a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <TIM_Base_SetConfig+0xc0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <TIM_Base_SetConfig+0x28>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025de:	d003      	beq.n	80025e8 <TIM_Base_SetConfig+0x28>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a28      	ldr	r2, [pc, #160]	; (8002684 <TIM_Base_SetConfig+0xc4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a20      	ldr	r2, [pc, #128]	; (8002680 <TIM_Base_SetConfig+0xc0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <TIM_Base_SetConfig+0x52>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002608:	d003      	beq.n	8002612 <TIM_Base_SetConfig+0x52>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <TIM_Base_SetConfig+0xc4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d108      	bne.n	8002624 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <TIM_Base_SetConfig+0xc0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d103      	bne.n	8002658 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f023 0201 	bic.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	611a      	str	r2, [r3, #16]
  }
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40000400 	.word	0x40000400

08002688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f023 0201 	bic.w	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f023 030a 	bic.w	r3, r3, #10
 80026c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f023 0210 	bic.w	r2, r3, #16
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800270e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	031b      	lsls	r3, r3, #12
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002720:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	621a      	str	r2, [r3, #32]
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	f043 0307 	orr.w	r3, r3, #7
 8002764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002776:	b480      	push	{r7}
 8002778:	b087      	sub	sp, #28
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002790:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	021a      	lsls	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	431a      	orrs	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4313      	orrs	r3, r2
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	609a      	str	r2, [r3, #8]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e041      	b.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002818:	d004      	beq.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10c      	bne.n	800283e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800282a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400

08002864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <__libc_init_array>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	2600      	movs	r6, #0
 800288c:	4d0c      	ldr	r5, [pc, #48]	; (80028c0 <__libc_init_array+0x38>)
 800288e:	4c0d      	ldr	r4, [pc, #52]	; (80028c4 <__libc_init_array+0x3c>)
 8002890:	1b64      	subs	r4, r4, r5
 8002892:	10a4      	asrs	r4, r4, #2
 8002894:	42a6      	cmp	r6, r4
 8002896:	d109      	bne.n	80028ac <__libc_init_array+0x24>
 8002898:	f000 f822 	bl	80028e0 <_init>
 800289c:	2600      	movs	r6, #0
 800289e:	4d0a      	ldr	r5, [pc, #40]	; (80028c8 <__libc_init_array+0x40>)
 80028a0:	4c0a      	ldr	r4, [pc, #40]	; (80028cc <__libc_init_array+0x44>)
 80028a2:	1b64      	subs	r4, r4, r5
 80028a4:	10a4      	asrs	r4, r4, #2
 80028a6:	42a6      	cmp	r6, r4
 80028a8:	d105      	bne.n	80028b6 <__libc_init_array+0x2e>
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b0:	4798      	blx	r3
 80028b2:	3601      	adds	r6, #1
 80028b4:	e7ee      	b.n	8002894 <__libc_init_array+0xc>
 80028b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ba:	4798      	blx	r3
 80028bc:	3601      	adds	r6, #1
 80028be:	e7f2      	b.n	80028a6 <__libc_init_array+0x1e>
 80028c0:	08002928 	.word	0x08002928
 80028c4:	08002928 	.word	0x08002928
 80028c8:	08002928 	.word	0x08002928
 80028cc:	0800292c 	.word	0x0800292c

080028d0 <memset>:
 80028d0:	4603      	mov	r3, r0
 80028d2:	4402      	add	r2, r0
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d100      	bne.n	80028da <memset+0xa>
 80028d8:	4770      	bx	lr
 80028da:	f803 1b01 	strb.w	r1, [r3], #1
 80028de:	e7f9      	b.n	80028d4 <memset+0x4>

080028e0 <_init>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	bf00      	nop
 80028e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e6:	bc08      	pop	{r3}
 80028e8:	469e      	mov	lr, r3
 80028ea:	4770      	bx	lr

080028ec <_fini>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	bf00      	nop
 80028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f2:	bc08      	pop	{r3}
 80028f4:	469e      	mov	lr, r3
 80028f6:	4770      	bx	lr
